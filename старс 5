import telebot
from telebot import types
import sqlite3
import datetime
import re

TOKEN = "7626087655:AAH0fFlDD7GH1CVJP7zFaGtgCIx9j0zdDqw"
ADMIN_ID = 6392028972
bot = telebot.TeleBot(TOKEN)
CHAT_ID_1 = -1002294344190  # ID –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
CHAT_ID_2 = -1002396806491  # ID –≤—Ç–æ—Ä–æ–≥–æ —á–∞—Ç–∞

conn = sqlite3.connect('stars_bot.db', check_same_thread=False)
cursor = conn.cursor()

# —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    stars REAL DEFAULT 0.00
)''')
conn.commit()

try:
    cursor.execute("ALTER TABLE users ADD COLUMN gram REAL DEFAULT 0.00")
    conn.commit()
except sqlite3.OperationalError:
    pass

cursor.execute('''
CREATE TABLE IF NOT EXISTS republics (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    creator_id INTEGER NOT NULL,
    chat_id INTEGER NOT NULL,
    date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
cursor.execute('''CREATE TABLE IF NOT EXISTS skins (
    user_id INTEGER PRIMARY KEY,
    selected_skin TEXT DEFAULT NULL
)''')
conn.commit()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞)
def close_connection():
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.close()   # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å—Å—è
# –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:
# close_connection()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
cursor.execute('''CREATE TABLE IF NOT EXISTS game_stats (
    user_id INTEGER PRIMARY KEY,
    ribbons INTEGER DEFAULT 0
)''')
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    channel_link TEXT NOT NULL
)
''')
conn.commit()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS clans (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    creator_id INTEGER NOT NULL,
    date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS clan_members (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    clan_id INTEGER NOT NULL,
    FOREIGN KEY (clan_id) REFERENCES clans (id) ON DELETE CASCADE
)
''')
conn.commit()

ADMIN_ID = 6392028972
PROVIDER_TOKEN = "PAYMENT_PROVIDER_TOKEN"  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
CURRENCY = "XTR"

bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('stars_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    stars REAL DEFAULT 0.00,
    gram REAL DEFAULT 0.00
)
''')
conn.commit()

from telebot import types
import sqlite3

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
cursor.execute("""
    CREATE TABLE IF NOT EXISTS start_photo (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        file_id TEXT
    )
""")
conn.commit()

class SafeCursor:
    def __init__(self, connection):
        self.connection = connection
        self.cursor = connection.cursor()

    def execute(self, query, params=None):
        try:
            if params:
                return self.cursor.execute(query, params)
            return self.cursor.execute(query)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    def fetchall(self):
        try:
            return self.cursor.fetchall()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fetchall: {e}")
            return []

    def fetchone(self):
        try:
            return self.cursor.fetchone()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fetchone: {e}")
            return None

    def close(self):
        try:
            self.cursor.close()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
def get_start_photo():
    cursor.execute("SELECT file_id FROM start_photo ORDER BY id DESC LIMIT 1")
    result = cursor.fetchone()
    return result[0] if result else None

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID
    args = message.text.split()
    referrer_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()

    welcome_text = (
        "üéÆ –ò–≥—Ä–∞–π—Ç–µ –≤ Kraft Skins üí± _–∏–≥—Ä–æ–≤–æ–π –±–æ—Ç 1.0_\n\n"
        "üë§ –° –¥—Ä—É–≥–æ–º –≤ –õ–°\n"
        "ü•ä –ò–≥—Ä—ã –≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ\n"
        "üé≠ –ö—É–ø–∏—Ç—å —Å–∫–∏–Ω\n\n"
        "üí¨ –ò–≥—Ä–æ–≤–æ–π —á–∞—Ç: @GVB_klan\n"
        "üñ• –ë–∞–≥–∏ –∏ –∏–¥–µ–∏: @laborotory_2\n"
        "üê∂ –ü–∏—Ç–æ–º–µ—Ü: /pt\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å: –ß—á"
    )

    start_photo_id = get_start_photo()

    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç"
    add_bot_button = types.InlineKeyboardMarkup()
    add_button = types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç",
        url=f"https://t.me/{bot.get_me().username}?startgroup=true"
    )
    add_bot_button.add(add_button)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
    if existing_user:
        if start_photo_id:
            bot.send_photo(message.chat.id, start_photo_id, caption=welcome_text, reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu())

        # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
        bot.send_message(message.chat.id, "üöÄ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É!", reply_markup=add_bot_button)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("INSERT INTO users (user_id, username, stars, gram) VALUES (?, ?, 0, 0)", (user_id, username))
    conn.commit()

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if referrer_id:
        cursor.execute("UPDATE users SET gram = gram + 1500 WHERE user_id = ?", (referrer_id,))
        conn.commit()
        try:
            bot.send_message(referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username}!\n\nüí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 1500 GRAM.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if start_photo_id:
        bot.send_photo(message.chat.id, start_photo_id, caption=welcome_text, reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç"
    bot.send_message(message.chat.id, "üöÄ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É!", reply_markup=add_bot_button)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add("üí± –û–±–º–µ–Ω—è—Ç—å", "–ú–∞–≥–∞–∑–∏–Ω", "üé∞ –ö–∞–∑–∏–Ω–æ")
    keyboard.add("üí≥ –î–æ–Ω–∞—Ç", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
    keyboard.add("üéÅ –ë–æ–Ω—É—Å", "üé∞ –ú–µ–≥–∞ –ö–∞–∑–∏–Ω–æ", "üè™ –ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤")
    keyboard.add("üì¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞", "‚öôÔ∏è –ö—Ä–∞—Ñ—Ç", "üèÜ –∫—É–ø–∏—Ç—å VIP", "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
    return keyboard
    
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    if start_photo_id:
        bot.send_photo(message.chat.id, start_photo_id, caption=welcome_text, reply_markup=start_menu_buttons())
    else:
        bot.send_message(message.chat.id, welcome_text, reply_markup=start_menu_buttons())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['ll'])
def request_start_photo(message):
    admin_id = 6392028972  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
    if message.from_user.id == admin_id:
        bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.")
        bot.register_next_step_handler(message, save_start_photo)
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def save_start_photo(message):
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –±—ã–ª–æ) –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        cursor.execute("DELETE FROM start_photo")
        cursor.execute("INSERT INTO start_photo (file_id) VALUES (?)", (file_id,))
        conn.commit()

        bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!")

import random

games = {}

@bot.message_handler(commands=["games"])
def start_game(message):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton("üòÑ 3x3", callback_data="select_size|3"),
        types.InlineKeyboardButton("ü§® 5x5", callback_data="select_size|5"),
        types.InlineKeyboardButton("üò¨ 8x8", callback_data="select_size|8"),
     types.InlineKeyboardButton("ü§ñ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞", callback_data="play_vs_bot"),
     types.InlineKeyboardButton("‚úåÔ∏è‚úäü§ö", callback_data="kamen_l"),
    
        )
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞:\n\nüÖß –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏\nü§ñ–ü—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –∏–≥—Ä—É –∏–ª–∏ üîé–ù–∞–π–¥–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:", reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_size"))
def select_size(call):
    size = int(call.data.split("|")[1])
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–≥—Ä—É", callback_data=f"publish_game|{size}"))

    bot.edit_message_text(
        f"‚öôÔ∏è–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª–µ {size}x{size}. –ù–∞–∂–º–∏—Ç–µ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–≥—Ä—É' , —á—Ç–æ–±—ã –ª—é–±–æ–π –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.‚§µÔ∏è",
        call.message.chat.id, call.message.message_id, reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("publish_game"))
def publish_game(call):
    size = int(call.data.split("|")[1])
    
    keyboard = types.InlineKeyboardMarkup()
    button_accept = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_game|{call.from_user.id}|{size}")
    keyboard.add(button_accept)

    bot.edit_message_text(
        f"üéÆ –ò–≥—Ä–æ–∫ {call.from_user.first_name} —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É {size}x{size}! –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤' , —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å.",
        call.message.chat.id, call.message.message_id, reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_game"))
def accept_game(call):
    _, creator_id, size = call.data.split("|")
    creator_id, size = int(creator_id), int(size)
    opponent_id = call.from_user.id
    opponent_name = call.from_user.first_name

    if opponent_id == creator_id:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–Ω—ã –∏–≥—Ä–æ–∫–æ–≤
    cursor.execute("SELECT selected_skin FROM users WHERE user_id = ?", (creator_id,))
    creator_skin = cursor.fetchone()
    creator_skin = creator_skin[0] if creator_skin and creator_skin[0] else "‚ùå"

    cursor.execute("SELECT selected_skin FROM users WHERE user_id = ?", (opponent_id,))
    opponent_skin = cursor.fetchone()
    opponent_skin = opponent_skin[0] if opponent_skin and opponent_skin[0] else "‚≠ï"

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ
    board = generate_board(size)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    games[call.message.chat.id] = {
        "board": board,
        "size": size,
        "players": {creator_id: creator_skin, opponent_id: opponent_skin},
        "turn": creator_id,
        "moves": 0,
        "message_id": None,
        "draw_offered_by": None
    }

    message = display_board(call.message.chat.id, board, size)
    games[call.message.chat.id]["message_id"] = message.message_id

def generate_board(size):
    board = [["·Ö†·Ö†" for _ in range(size)] for _ in range(size)]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤—å—è –∏ –∫–∞–º–Ω–∏
    tree_count = random.randint(1, 2 if size == 5 else 3 if size == 8 else 1)
    stone_chance = {3: 15, 5: 20, 8: 25}[size]

    for _ in range(tree_count):
        x, y = random.randint(0, size - 1), random.randint(0, size - 1)
        board[x][y] = "üå≥"

    for _ in range(size * size):
        if random.randint(1, 100) <= stone_chance:
            x, y = random.randint(0, size - 1), random.randint(0, size - 1)
            if board[x][y] == "·Ö†·Ö†":
                board[x][y] = "ü™®"
                break

    return board

def display_board(chat_id, board, size):
    keyboard = types.InlineKeyboardMarkup(row_width=size)
    for i, row in enumerate(board):
        buttons = []
        for j, cell in enumerate(row):
            buttons.append(types.InlineKeyboardButton(cell, callback_data=f"move|{i}|{j}"))
        keyboard.add(*buttons)

    keyboard.add(types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é", callback_data="offer_draw"))
    return bot.send_message(chat_id, "–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("move"))
def handle_moves(call):
    game = games.get(call.message.chat.id)
    if not game:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    user_id = call.from_user.id
    if user_id != game["turn"]:
        bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    _, x, y = call.data.split("|")
    x, y = int(x), int(y)

    if game["board"][x][y] == "üå≥":
        cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = 'ü™ì'", (user_id,))
        result = cursor.fetchone()

        if result and result[0] > 0:    
            game["board"][x][y] = "ü™µ"    
            cursor.execute(
                '''INSERT INTO user_skins (user_id, skin, quantity)     
                   VALUES (?, 'ü™µ', 1)     
                   ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1''',
                (user_id,)
            )    
            conn.commit()    
            bot.answer_callback_query(call.id, "–í—ã —Å—Ä—É–±–∏–ª–∏ –¥–µ—Ä–µ–≤–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ –±—Ä–µ–≤–Ω–æ! ü™µ")    
        else:    
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–ø–æ—Ä–∞! ü™ì")    
        return

    elif game["board"][x][y] == "ü™®":
        bot.answer_callback_query(call.id, "–ù–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ –∫–∞–º–µ–Ω—å! –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ö–æ–¥.")
        return

    elif game["board"][x][y] != "·Ö†·Ö†":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return
    else:
        symbol = game["players"][user_id]
        game["board"][x][y] = symbol
        game["turn"] = list(game["players"].keys())[1 - list(game["players"].keys()).index(user_id)]
        game["moves"] += 1

        winner = check_winner(game["board"], symbol, game["size"])
        if winner:
            end_game(call.message.chat.id, user_id, symbol, game["moves"], game["message_id"])
            return

        update_board(call.message.chat.id, game["board"], game["message_id"], game["size"])

def check_winner(board, symbol, size):
    win_length = {3: 3, 5: 4, 8: 5}[size]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä—è–¥ –¥–ª—è –ø–æ–±–µ–¥—ã

    for row in board:
        for i in range(size - win_length + 1):
            if row[i:i + win_length] == [symbol] * win_length:
                return True

    for col in range(size):
        for row in range(size - win_length + 1):
            if [board[row + i][col] for i in range(win_length)] == [symbol] * win_length:
                return True

    for row in range(size - win_length + 1):
        for col in range(size - win_length + 1):
            if [board[row + i][col + i] for i in range(win_length)] == [symbol] * win_length:
                return True
            if [board[row + i][col + win_length - 1 - i] for i in range(win_length)] == [symbol] * win_length:
                return True

    return False

def update_board(chat_id, board, message_id, size):
    keyboard = types.InlineKeyboardMarkup(row_width=size)
    for i, row in enumerate(board):
        buttons = []
        for j, cell in enumerate(row):
            buttons.append(types.InlineKeyboardButton(cell, callback_data=f"move|{i}|{j}"))
        keyboard.add(*buttons)

    keyboard.add(types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é", callback_data="offer_draw"))
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=keyboard)

def end_game(chat_id, winner_id, symbol, moves, message_id, draw=False):
    if draw:
        bot.edit_message_text(
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∏—á—å–µ–π! üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {moves}",
            chat_id,
            message_id
        )
    else:
        bot.edit_message_text(
            f"–ò–≥—Ä–æ–∫ {symbol} –ø–æ–±–µ–¥–∏–ª! üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {moves}",
            chat_id,
            message_id
        )

    if winner_id:
        cursor.execute("SELECT games_played FROM game_progress WHERE user_id = ?", (winner_id,))
        result = cursor.fetchone()
        if result:
            games_played = result[0] + 1
            cursor.execute("UPDATE game_progress SET games_played = ? WHERE user_id = ?", (games_played, winner_id))
        else:
            cursor.execute("INSERT INTO game_progress (user_id, games_played) VALUES (?, ?)", (winner_id, 1))
        conn.commit()

    if chat_id in games:
        del games[chat_id]

@bot.callback_query_handler(func=lambda call: call.data == "offer_draw")
def offer_draw(call):
    game = games.get(call.message.chat.id)
    if not game:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é
    if user_id != game["turn"]:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∏—á—å—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–µ–π
    keyboard = types.InlineKeyboardMarkup()
    button_accept = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –Ω–∏—á—å—é", callback_data="accept_draw")
    button_reject = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å –≤ –Ω–∏—á—å–µ–π", callback_data="reject_draw")
    keyboard.add(button_accept, button_reject)

    bot.send_message(
        call.message.chat.id,
        "–ò–≥—Ä–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–∏—á—å—é. –ü—Ä–∏–º–µ—Ç–µ –ª–∏ –≤—ã?",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "accept_draw")
def accept_draw(call):
    game = games.get(call.message.chat.id)
    if not game:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    user_id = call.from_user.id
    if user_id == game["turn"]:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∏—á—å—é, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–∞—à —Ö–æ–¥.")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –Ω–∏—á—å–µ–π
    end_game(call.message.chat.id, None, None, game["moves"], game["message_id"], draw=True)

@bot.callback_query_handler(func=lambda call: call.data == "reject_draw")
def reject_draw(call):
    bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∏—á—å–µ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

import random
from telebot import types

# –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
games = {}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
@bot.message_handler(commands=["–ò–≥—Ä–∞—Ç—å"])
def start_game(message):
    size = 6  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–ª–µ 6x6 –¥–ª—è –∏–≥—Ä—ã

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫—Ä–µ—Å—Ç–∏–∫–∞ –∏–ª–∏ –Ω–æ–ª–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    player_symbol = random.choice(["‚ùå", "‚≠ï"])
    ghost_position = (random.randint(0, size - 1), random.randint(0, size - 1))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    board = [["·Ö†·Ö†" for _ in range(size)] for _ in range(size)]
    board[ghost_position[0]][ghost_position[1]] = "üëª"  # –ü—Ä–∏–≤–∏–¥–µ–Ω–∏–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    games[message.chat.id] = {
        "board": board,
        "size": size,
        "players": [player_symbol, "‚ùå" if player_symbol == "‚≠ï" else "‚≠ï"],  # –î–≤–∞ –∏–≥—Ä–æ–∫–∞
        "turn": 0,  # –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
        "ghost_position": ghost_position,
        "moves": 0,
        "message_id": None
    }

    message = display_board(message.chat.id, board, size)
    games[message.chat.id]["message_id"] = message.message_id

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
def display_board(chat_id, board, size):
    keyboard = types.InlineKeyboardMarkup(row_width=size)
    for i, row in enumerate(board):
        buttons = []
        for j, cell in enumerate(row):
            buttons.append(types.InlineKeyboardButton(cell, callback_data=f"move|{i}|{j}"))
        keyboard.add(*buttons)

    return bot.send_message(chat_id, "–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ:", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ–¥–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("move"))
def handle_move(call):
    game = games.get(call.message.chat.id)
    if not game:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    user_id = call.from_user.id
    player_symbol = game["players"][game["turn"]]
    ghost_position = game["ghost_position"]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
    _, x, y = call.data.split("|")
    x, y = int(x), int(y)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞
    if game["board"][x][y] != "·Ö†·Ö†":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return

    # –û—á–∏—â–∞–µ–º –∫–ª–µ—Ç–∫—É
    game["board"][x][y] = player_symbol

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
    if check_victory(game["board"], x, y, ghost_position):
        end_game(call.message.chat.id, player_symbol, game["moves"], game["message_id"])
        return

    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–¥–µ–Ω–∏—è
    new_ghost_position = move_ghost(ghost_position, game["size"])
    game["ghost_position"] = new_ghost_position
    game["board"][new_ghost_position[0]][new_ghost_position[1]] = "üëª"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ–¥
    game["turn"] = (game["turn"] + 1) % 2  # –ú–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    game["moves"] += 1

    update_board(call.message.chat.id, game["board"], game["message_id"], game["size"])

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–∏–≤–∏–¥–µ–Ω–∏—è –Ω–∞ —Å–æ—Å–µ–¥–Ω—é—é –∫–ª–µ—Ç–∫—É
def move_ghost(ghost_position, size):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # –í–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ
    possible_moves = []

    for dx, dy in directions:
        new_x, new_y = ghost_position[0] + dx, ghost_position[1] + dy
        if 0 <= new_x < size and 0 <= new_y < size:
            possible_moves.append((new_x, new_y))

    return random.choice(possible_moves)  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã
def check_victory(board, x, y, ghost_position):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∫—Ä—É–∂–µ–Ω–æ –ª–∏ –ø—Ä–∏–≤–∏–¥–µ–Ω–∏–µ
    gx, gy = ghost_position
    if (
        (gx == x and abs(gy - y) == 1) or
        (gy == y and abs(gx - x) == 1)
    ):
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
def update_board(chat_id, board, message_id, size):
    keyboard = types.InlineKeyboardMarkup(row_width=size)
    for i, row in enumerate(board):
        buttons = []
        for j, cell in enumerate(row):
            buttons.append(types.InlineKeyboardButton(cell, callback_data=f"move|{i}|{j}"))
        keyboard.add(*buttons)

    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
def end_game(chat_id, winner_symbol, moves, message_id):
    bot.edit_message_text(
        f"–ò–≥—Ä–æ–∫ —Å —Å–∏–º–≤–æ–ª–æ–º {winner_symbol} –ø–æ–±–µ–¥–∏–ª! üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {moves}",
        chat_id,
        message_id
    )

    if chat_id in games:
        del games[chat_id]  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

import random

bot_games = {}

@bot.callback_query_handler(func=lambda call: call.data == "play_vs_bot")
def play_vs_bot_callback(call):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏."""
    chat_id = call.message.chat.id

    if chat_id in bot_games:
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
        return

    board = [["·Ö†·Ö†" for _ in range(5)] for _ in range(5)]
    player_symbol, bot_symbol = "‚≠ï", "‚ùå"

    bot_games[chat_id] = {
        "board": board,
        "player_symbol": player_symbol,
        "bot_symbol": bot_symbol,
        "turn": "player",
        "moves": 0,
        "message_id": None
    }

    message = send_bot_board(chat_id, board)
    bot_games[chat_id]["message_id"] = message.message_id

def send_bot_board(chat_id, board):
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    for i, row in enumerate(board):
        buttons = []
        for j, cell in enumerate(row):
            buttons.append(types.InlineKeyboardButton(cell, callback_data=f"bot_move|{i}|{j}"))
        keyboard.add(*buttons)

    return bot.send_message(chat_id, "üéÆ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 5x5:\n–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º!", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("bot_move"))
def handle_bot_move(call):
    game = bot_games.get(call.message.chat.id)
    if not game:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    if game["turn"] != "player":
        bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å —Ö–æ–¥ –±–æ—Ç–∞!")
        return

    _, x, y = call.data.split("|")
    x, y = int(x), int(y)

    if game["board"][x][y] != "·Ö†·Ö†":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return

    game["board"][x][y] = game["player_symbol"]
    game["moves"] += 1

    if check_bot_winner(game["board"], game["player_symbol"]):
        end_bot_game(call.message.chat.id, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ", game["message_id"])
        return

    game["turn"] = "bot"
    update_bot_board(call.message.chat.id, game["board"], game["message_id"])

    bot_move(call.message.chat.id)

def bot_move(chat_id):
    game = bot_games.get(chat_id)
    if not game:
        return

    board = game["board"]
    player = game["player_symbol"]
    bot_symbol = game["bot_symbol"]

    best_move = find_best_move(board, bot_symbol, player)

    if best_move:
        x, y = best_move
        board[x][y] = bot_symbol
        game["moves"] += 1

    if check_bot_winner(board, bot_symbol):
        end_bot_game(chat_id, "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª! ü§ñ", game["message_id"])
        return

    game["turn"] = "player"
    update_bot_board(chat_id, board, game["message_id"])

def find_best_move(board, bot_symbol, player_symbol):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–µ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è –±–æ—Ç–∞.
    1. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å ‚Äî –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç.
    2. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–≥—Ä–æ–∂–∞–µ—Ç –ø–æ–±–µ–¥–æ–π ‚Äî –±–ª–æ–∫–∏—Ä—É–µ—Ç –µ–≥–æ.
    3. –ï—Å–ª–∏ –Ω–µ—Ç —É–≥—Ä–æ–∑ ‚Äî —Å—Ç—Ä–æ–∏—Ç —Å–≤–æ—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.
    4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥.
    """
    empty_cells = [(i, j) for i in range(5) for j in range(5) if board[i][j] == "·Ö†·Ö†"]

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥–Ω—ã–π —Ö–æ–¥
    for x, y in empty_cells:
        board[x][y] = bot_symbol
        if check_bot_winner(board, bot_symbol):
            board[x][y] = "·Ö†·Ö†"
            return x, y
        board[x][y] = "·Ö†·Ö†"

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–≥—Ä–æ–∫–∞
    for x, y in empty_cells:
        board[x][y] = player_symbol
        if check_bot_winner(board, player_symbol):
            board[x][y] = "·Ö†·Ö†"
            return x, y
        board[x][y] = "·Ö†·Ö†"

    # 3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (–ø–æ–∏—Å–∫ —Ä—è–¥—ã –∏–∑ 2-3 —Å–≤–æ–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
    for x, y in empty_cells:
        if is_good_move(board, x, y, bot_symbol):
            return x, y

    # 4. –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö —Ö–æ–¥–æ–≤, —Ö–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ
    return random.choice(empty_cells) if empty_cells else None

def is_good_move(board, x, y, symbol):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ —Ö–æ—Ä–æ—à–∏–º (—Å—Ç—Ä–æ–∏—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, –ø—Ä–∏–±–ª–∏–∂–∞—è –∫ –ø–æ–±–µ–¥–µ). """
    board[x][y] = symbol
    win = check_bot_winner(board, symbol)
    board[x][y] = "·Ö†·Ö†"
    return win

def update_bot_board(chat_id, board, message_id):
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    for i, row in enumerate(board):
        buttons = []
        for j, cell in enumerate(row):
            buttons.append(types.InlineKeyboardButton(cell, callback_data=f"bot_move|{i}|{j}"))
        keyboard.add(*buttons)

    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=keyboard)

def check_bot_winner(board, symbol):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–±–µ–¥–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º. """
    win_length = 4

    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    for row in board:
        for i in range(2):
            if row[i:i + win_length] == [symbol] * win_length:
                return True

    # –í–µ—Ä—Ç–∏–∫–∞–ª–∏
    for col in range(5):
        for row in range(2):
            if [board[row + i][col] for i in range(win_length)] == [symbol] * win_length:
                return True

    # –î–∏–∞–≥–æ–Ω–∞–ª–∏
    for row in range(2):
        for col in range(2):
            if [board[row + i][col + i] for i in range(win_length)] == [symbol] * win_length:
                return True
            if [board[row + i][col + win_length - 1 - i] for i in range(win_length)] == [symbol] * win_length:
                return True

    return False

def end_bot_game(chat_id, result_text, message_id):
    bot.edit_message_text(result_text, chat_id, message_id)
    bot_games.pop(chat_id, None)

from telebot import types

duels = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥—É—ç–ª–∏
@bot.callback_query_handler(func=lambda call: call.data == "kamen_l")
def duel_request(call):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å)
    for opponent_id, duel in duels.items():
        if duel['challenger'] == user_id:
            bot.send_message(call.message.chat.id, "‚ùå –í—ã —É–∂–µ –≤—ã–∑–≤–∞–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å!")
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É—ç–ª—å —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    duels[user_id] = {'challenger': user_id}

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
    keyboard = types.InlineKeyboardMarkup()
    accept_button = types.InlineKeyboardButton("‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_duel_{user_id}")
    keyboard.add(accept_button)

    bot.send_message(
        call.message.chat.id,
        f"üéØ <b>{call.from_user.first_name}</b> –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–≥–æ-—Ç–æ –Ω–∞ –¥—É—ç–ª—å! –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_duel_"))
def accept_duel(call):
    opponent_id = call.from_user.id
    duel_data = call.data.split("_")
    challenger_id = int(duel_data[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤
    if challenger_id not in duels or duels[challenger_id]['challenger'] != challenger_id:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
    del duels[challenger_id]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã (–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞)
    keyboard = types.InlineKeyboardMarkup()
    options = ["‚úä", "‚úåÔ∏è", "ü§ö"]
    for option in options:
        keyboard.add(types.InlineKeyboardButton(option, callback_data=f"rps_{challenger_id}_{opponent_id}_{option}"))

    bot.send_message(call.message.chat.id, f"üõ°Ô∏è {call.from_user.first_name} –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=keyboard)

rps_choices = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@bot.callback_query_handler(func=lambda call: call.data.startswith("rps_"))
def play_rps(call):
    data = call.data.split("_")
    challenger_id = int(data[1])
    opponent_id = int(data[2])
    player_choice = data[3]

    player_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª –ª–∏ —Ö–æ–¥ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
    if (challenger_id, opponent_id) not in rps_choices:
        rps_choices[(challenger_id, opponent_id)] = {player_id: player_choice}
        bot.answer_callback_query(call.id, "–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    rps_choices[(challenger_id, opponent_id)][player_id] = player_choice
    choices = rps_choices.pop((challenger_id, opponent_id))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    challenger_choice = choices[challenger_id]
    opponent_choice = choices[opponent_id]

    results = {
        ("‚úä", "‚úåÔ∏è"): challenger_id, ("‚úåÔ∏è", "ü§ö"): challenger_id, ("ü§ö", "‚úä"): challenger_id,  # –ü–æ–±–µ–¥–∞ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ
        ("‚úåÔ∏è", "‚úä"): opponent_id, ("ü§ö", "‚úåÔ∏è"): opponent_id, ("‚úä", "ü§ö"): opponent_id  # –ü–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    }

    if challenger_choice == opponent_choice:
        winner_id = None
    else:
        winner_id = results.get((challenger_choice, opponent_choice))

    if winner_id:
        loser_id = challenger_id if winner_id == opponent_id else opponent_id

        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–æ—Ö–≤–∞–ª—É (–∏–ª–∏ GRAM, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ)
        bot.send_message(call.message.chat.id,
            f"‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üé≠ {call.from_user.first_name} –≤—ã–±—Ä–∞–ª: {player_choice}\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {bot.get_chat_member(call.message.chat.id, winner_id).user.first_name}\n\n"
        )
    else:
        bot.send_message(call.message.chat.id, "‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π!")

@bot.message_handler(commands=["—Ä—ã–Ω–æ–∫"])
def upload_item(message):
    user_id = message.from_user.id
    try:
        _, skin, price = message.text.split(" ")
        price = int(price)

        if price <= 0:
            bot.reply_to(message, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–∫–∏–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?",
            (user_id, skin),
        )
        result = cursor.fetchone()

        if not result or result[0] <= 0:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")
            return

        # –û—Ç–Ω–∏–º–∞–µ–º 1 —à—Ç—É–∫—É —Å–∫–∏–Ω–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?",
            (user_id, skin),
        )
        cursor.execute("DELETE FROM user_skins WHERE quantity <= 0")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Ä—ã–Ω–æ–∫
        cursor.execute(
            "INSERT INTO market (seller_id, skin, price) VALUES (?, ?, ?)",
            (user_id, skin, price),
        )
        conn.commit()

        bot.reply_to(message, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ {skin} –∑–∞ {price} GRAM –Ω–∞ —Ä—ã–Ω–æ–∫!")

    except ValueError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/—Ä—ã–Ω–æ–∫ —Å–∫–∏–Ω 100`", parse_mode="Markdown")


market_messages = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
user_clicks = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤

def send_market(message, user_id, page=1, edit_msg_id=None):
    offset = (page - 1) * 10
    cursor.execute("SELECT skin, COUNT(skin) FROM market GROUP BY skin")
    skin_counts = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

    if not skin_counts:
        bot.send_message(message.chat.id, "–†—ã–Ω–æ–∫ –ø—É—Å—Ç! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –ø–æ–º–æ—â—å—é /—Ä—ã–Ω–æ–∫.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–∫–∏–Ω–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    skin_display = "–ù–∞ –ø—Ä–æ–¥–∞–∂–µ: " + " ".join([f"{skin}x{count}" for skin, count in skin_counts])

    cursor.execute("SELECT id, skin, price, seller_id FROM market LIMIT 20 OFFSET ?", (offset,))
    items = cursor.fetchall()

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    buttons = []

    for item_id, skin, price, seller_id in items:
        buttons.append(
            types.InlineKeyboardButton(
                f"{skin} {price}",
                callback_data=f"buy_market_{item_id}_{seller_id}"
            )
        )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ 4 —Å—Ç–æ–ª–±—Ü–∞
    for i in range(0, len(buttons), 4):
        keyboard.row(*buttons[i:i+4])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"market_page_{page-1}"))
    
    nav_buttons.append(types.InlineKeyboardButton(f"–°—Ç—Ä. {page}", callback_data="none"))

    cursor.execute("SELECT COUNT(*) FROM market")
    total_items = cursor.fetchone()[0]

    if total_items > offset + 20:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"market_page_{page+1}"))

    if nav_buttons:
        keyboard.row(*nav_buttons)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞
    market_text = f"üõí #–†—ã–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{skin_display}"

    if edit_msg_id:
        bot.edit_message_text(market_text, message.chat.id, edit_msg_id, reply_markup=keyboard)
        market_messages[user_id] = edit_msg_id
    else:
        msg = bot.send_message(message.chat.id, market_text, reply_markup=keyboard)
        market_messages[user_id] = msg.message_id

@bot.message_handler(func=lambda message: message.text == "–†—ã–Ω–æ–∫")
def market(message):
    send_market(message, message.from_user.id, page=1)


@bot.callback_query_handler(func=lambda call: call.data.startswith("market_page_"))
def paginate_market(call):
    page = int(call.data.split("_")[-1])
    send_market(call.message, call.from_user.id, page, edit_msg_id=market_messages.get(call.from_user.id))


@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_market_"))
def buy_market_item(call):
    user_id = call.from_user.id
    item_data = call.data.split("_")
    item_id, seller_id = int(item_data[2]), int(item_data[3])

    if user_id == seller_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥
        if user_clicks.get(user_id) == item_id:
            cursor.execute("SELECT skin, price FROM market WHERE id = ?", (item_id,))
            item = cursor.fetchone()
            
            if item:
                skin, price = item
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –≤–ª–∞–¥–µ–ª—å—Ü—É
                cursor.execute("DELETE FROM market WHERE id = ?", (item_id,))
                cursor.execute(
                    '''INSERT INTO user_skins (user_id, skin, quantity)
                       VALUES (?, ?, 1) ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1''',
                    (user_id, skin)
                )
                conn.commit()

                bot.answer_callback_query(call.id, f"‚ùå –í—ã —Å–Ω—è–ª–∏ {skin} —Å –ø—Ä–æ–¥–∞–∂–∏.")
                send_market(call.message, user_id, page=1, edit_msg_id=market_messages.get(user_id))
            return
        
        # –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –ø–æ —Å–≤–æ–µ–º—É —Ç–æ–≤–∞—Ä—É
        user_clicks[user_id] = item_id
        bot.answer_callback_query(call.id, "–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ç–æ–≤–∞—Ä —Å –ø—Ä–æ–¥–∞–∂–∏.")
        return

    # –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
    cursor.execute("SELECT skin, price FROM market WHERE id = ?", (item_id,))
    item = cursor.fetchone()

    if not item:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω.")
        return

    skin, price = item

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
    buyer_data = cursor.fetchone()

    if not buyer_data or buyer_data[0] < price:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ –¥–µ–Ω–µ–≥ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Å–∫–∏–Ω–∞
    cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (price, user_id))
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (price, seller_id))
    cursor.execute(
        '''INSERT INTO user_skins (user_id, skin, quantity)
           VALUES (?, ?, 1) ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1''',
        (user_id, skin)
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ä—ã–Ω–∫–∞
    cursor.execute("DELETE FROM market WHERE id = ?", (item_id,))
    conn.commit()

    bot.answer_callback_query(call.id, f"–í—ã –∫—É–ø–∏–ª–∏ {skin} –∑–∞ {price} GRAM!")
    bot.send_message(call.message.chat.id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {skin}. GRAM –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    send_market(call.message, user_id, page=1, edit_msg_id=market_messages.get(user_id))

import time
import threading

def track_gram_changes():
    while True:
        cursor.execute('''
        SELECT gc.user_id, u.username, gc.old_gram, gc.new_gram, gc.change_time
        FROM gram_changes gc
        JOIN users u ON gc.user_id = u.user_id
        ORDER BY gc.change_time ASC
        ''')
        changes = cursor.fetchall()

        for change in changes:
            user_id, username, old_gram, new_gram, change_time = change
            difference = new_gram - old_gram
            message = (f"üì¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≥—Ä–∞–º–º–æ–≤!\n"
                       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                       f"üí∞ –ë—ã–ª–æ: {old_gram} GRAM\n"
                       f"üíµ –°—Ç–∞–ª–æ: {new_gram} GRAM\n"
                       f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if difference > 0 else ''}{difference} GRAM\n"
                       f"üïí –í—Ä–µ–º—è: {change_time}")
            
            try:
                bot.send_message(ADMIN_ID, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cursor.execute("DELETE FROM gram_changes WHERE user_id = ?", (user_id,))
            conn.commit()

        time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=track_gram_changes, daemon=True).start()

@bot.message_handler(commands=["me"])
def user_market(message):
    user_id = message.from_user.id
    send_user_market(message, user_id)

def send_user_market(message, user_id, page=1, edit_msg_id=None):
    offset = (page - 1) * 10
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute(
        "SELECT id, skin, price FROM market WHERE seller_id = ? LIMIT 20 OFFSET ?",
        (user_id, offset)
    )
    items = cursor.fetchall()

    if not items:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username or f"ID: {user_id}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤
    skin_display = f"üõí –¢–æ–≤–∞—Ä—ã –æ—Ç @{username}:\n"
    for item_id, skin, price in items:
        skin_display += f"üîπ {skin} ‚Äî {price} GRAM\n"

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    buttons = []

    for item_id, skin, price in items:
        buttons.append(
            types.InlineKeyboardButton(
                f"{skin} {price}üí∞",
                callback_data=f"buy_market_{item_id}_{user_id}"
            )
        )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ 4 —Å—Ç–æ–ª–±—Ü–∞
    for i in range(0, len(buttons), 4):
        keyboard.row(*buttons[i:i+4])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_market_{user_id}_{page-1}"))
    
    nav_buttons.append(types.InlineKeyboardButton(f"–°—Ç—Ä. {page}", callback_data="none"))

    cursor.execute("SELECT COUNT(*) FROM market WHERE seller_id = ?", (user_id,))
    total_items = cursor.fetchone()[0]

    if total_items > offset + 20:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"user_market_{user_id}_{page+1}"))

    if nav_buttons:
        keyboard.row(*nav_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if edit_msg_id:
        bot.edit_message_text(skin_display, message.chat.id, edit_msg_id, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, skin_display, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("user_market_"))
def paginate_user_market(call):
    _, user_id, page = call.data.split("_")
    send_user_market(call.message, int(user_id), int(page), edit_msg_id=call.message.message_id)

@bot.message_handler(commands=["—Å—Å"])
def clear_market(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π ID)
    admin_id = 6392028972  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
    if user_id != admin_id:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä—ã–Ω–∫–∞!")
        return

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä—ã–Ω–∫–∞
    cursor.execute("DELETE FROM market")
    conn.commit()

    bot.reply_to(message, "‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ —É–¥–∞–ª–µ–Ω—ã!")

@bot.message_handler(commands=["–ø–∂"])
def request_donation(message):
    recipient_id = message.from_user.id
    recipient_name = message.from_user.first_name

    command_parts = message.text.split()
    if len(command_parts) < 2:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ —Å–∫–∏–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã! –ù–∞–ø—Ä–∏–º–µ—Ä: /–ø–∂ 500 –∏–ª–∏ /–ø–∂ üåü")
        return

    request_item = command_parts[1]

    if request_item.isdigit():
        amount = int(request_item)
        keyboard = types.InlineKeyboardMarkup()
        button_donate = types.InlineKeyboardButton(
            f"üíé –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å {amount} GRAM", callback_data=f"donate|{recipient_id}|{amount}"
        )
        keyboard.add(button_donate)
        bot.send_message(
            message.chat.id,
            f"üéÅ {recipient_name} –∑–∞–ø—Ä–æ—Å–∏–ª {amount} GRAM! –ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–º–æ—á—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=keyboard
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Å–∫–∏–Ω –≤ –±–∞–∑–µ
        cursor.execute("SELECT COUNT(*) FROM user_skins WHERE skin = ?", (request_item,))
        if cursor.fetchone()[0] == 0:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
            return

        keyboard = types.InlineKeyboardMarkup()
        button_donate_skin = types.InlineKeyboardButton(
            f"üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å {request_item}", callback_data=f"donate_skin|{recipient_id}|{request_item}"
        )
        keyboard.add(button_donate_skin)
        bot.send_message(
            message.chat.id,
            f"üéÅ {recipient_name} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω {request_item}! –ö—Ç–æ –≥–æ—Ç–æ–≤ –ø–æ–¥–∞—Ä–∏—Ç—å?",
            reply_markup=keyboard
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("donate_skin"))
def process_skin_donation(call):
    _, recipient_id, skin = call.data.split("|")
    donor_id = call.from_user.id
    recipient_id = int(recipient_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–æ–Ω–æ—Ä–∞ —Ç–∞–∫–æ–π —Å–∫–∏–Ω
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (donor_id, skin))
    donor_skins = cursor.fetchone()

    if not donor_skins or donor_skins[0] < 1:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Å–∫–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!")
        return

    # –£–±–∏—Ä–∞–µ–º —Å–∫–∏–Ω —É –¥–æ–Ω–æ—Ä–∞
    cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (donor_id, skin))
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    cursor.execute('''
        INSERT INTO user_skins (user_id, skin, quantity)
        VALUES (?, ?, 1)
        ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
    ''', (recipient_id, skin))
    conn.commit()

    bot.send_message(recipient_id, f"üéâ –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ —Å–∫–∏–Ω {skin} –æ—Ç {call.from_user.first_name}! üéÅ")
    bot.send_message(donor_id, f"üôè –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–∫–∏–Ω {skin} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}. –°–ø–∞—Å–∏–±–æ –∑–∞ —â–µ–¥—Ä–æ—Å—Ç—å!")

    bot.answer_callback_query(call.id, "‚úÖ –°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")

from telebot.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton

@bot.message_handler(func=lambda message: message.text == "üí≥ –î–æ–Ω–∞—Ç")
def donate_message(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("1‚≠ê = 6,000 GRAM", callback_data="donate_1"))
    markup.add(InlineKeyboardButton("2‚≠ê = 12,000 GRAM", callback_data="donate_2"))
    markup.add(InlineKeyboardButton("4‚≠ê = 24,000 GRAM", callback_data="donate_4"))
    markup.add(InlineKeyboardButton("8‚≠ê = 50,000 GRAM", callback_data="donate_8"))
    markup.add(InlineKeyboardButton("3‚≠ê = 1üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω", callback_data="buy_zerocoin_1"))
    markup.add(InlineKeyboardButton("9‚≠ê = 3üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω–∞", callback_data="buy_zerocoin_3"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("donate_") or call.data.startswith("buy_zerocoin_"))
def process_donation(call):
    if call.data.startswith("donate_"):
        stars_map = {
            "donate_1": (1, 6000),
            "donate_2": (2, 12000),
            "donate_4": (4, 24000),
            "donate_8": (8, 50000),
        }
        stars, amount = stars_map[call.data]
        description = f"{stars}‚≠ê = {amount} GRAM"
        payload = f"donation_{stars}_{call.from_user.id}"

    elif call.data.startswith("buy_zerocoin_"):
        zerocoin_map = {
            "buy_zerocoin_1": (3, 1),
            "buy_zerocoin_3": (9, 3),
        }
        stars, zerocoins = zerocoin_map[call.data]
        description = f"{stars}‚≠ê = {zerocoins}üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω(–æ–≤)"
        payload = f"zerocoin_{zerocoins}_{call.from_user.id}"

    prices = [LabeledPrice(label=f"–ü–æ–∫—É–ø–∫–∞ –∑–∞ {stars}‚≠ê", amount=stars * 1)]  # 100 = 1 XTR (–ø—Ä–∏–º–µ—Ä)

    bot.send_invoice(
        chat_id=call.message.chat.id,
        title=f"–ü–æ–∫—É–ø–∫–∞ –∑–∞ {stars}‚≠ê",
        description=description,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        start_parameter=payload,
        invoice_payload=payload,
    )


@bot.message_handler(content_types=["successful_payment"])
def got_payment(message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload

    if payload.startswith("donation_"):
        stars = int(payload.split("_")[1])
        gram_amount = {1: 6000, 2: 12000, 4: 24000, 8: 50000}[stars]

        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (gram_amount, user_id))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {gram_amount} GRAM üíé")

    elif payload.startswith("zerocoin_"):
        zerocoins = int(payload.split("_")[1])

        cursor.execute("UPDATE users SET zerocoin = zerocoin + ? WHERE user_id = ?", (zerocoins, user_id))
        conn.commit()
        bot.send_message(message.chat.id, f"‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {zerocoins}üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω–∞!")
            
from telebot import types

# –°–∫–∏–Ω—ã –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
skins = {
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [("üöî", 12), ("üöô", 7), ("‚úàÔ∏è", 7), ("üõ∏", 6)],
    "–ñ–∏–≤–æ—Ç–Ω—ã–µ": [("ü¶ñ", 6), ("üêâ", 6), ("üêñ", 5), ("üêë", 5), ("üêç", 8), ("üêä", 10), ("ü¶ï", 7), ("üê≤", 7)],
    "–¢–µ—Ö–Ω–∏–∫–∞": [("‚õΩ", 17), ("üß≠", 14), ("üß∞", 8), ("üì∫", 7)],
    "–ß–µ—Ä–µ–ø–∞ –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∏–Ω—ã": [("üíÄ", 8), ("üëΩ", 7), ("üôÄ", 7), ("‚ùÑÔ∏è", 7), ("üå∑", 7), ("üëÄ", 3), ("üåå", 3)],
}

CATEGORIES_PER_PAGE = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤"
@bot.message_handler(func=lambda message: message.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤")
def skin_shop(message, page=0):
    total_pages = (len(skins) - 1) // CATEGORIES_PER_PAGE + 1
    categories = list(skins.keys())[page * CATEGORIES_PER_PAGE : (page + 1) * CATEGORIES_PER_PAGE]

    keyboard = types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–∫–∏–Ω—ã
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(f"üîπ {category} üîπ", callback_data="none"))
        for skin, price in skins[category]:
            button = types.InlineKeyboardButton(f"{skin} {price} üåü", callback_data=f"pay_skin_{skin}_{price}")
            keyboard.add(button)

    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"shop_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"shop_page_{page+1}"))

    if nav_buttons:
        keyboard.add(*nav_buttons)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
@bot.callback_query_handler(func=lambda call: call.data.startswith("shop_page_"))
def change_page(call):
    page = int(call.data.split("_")[2])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    skin_shop(call.message, page)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_skin_"))
def pay_skin(call):
    user_id = call.from_user.id
    _, _, skin, price = call.data.split("_")
    price = int(price)

    prices = [types.LabeledPrice(label=f"–ü–æ–∫—É–ø–∫–∞ {skin}", amount=price * 1)]  # –¶–µ–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã

    bot.send_invoice(
        chat_id=call.message.chat.id,
        title="–ü–æ–∫—É–ø–∫–∞",
        description=f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è {skin}.",
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        start_parameter="buy_skin",
        invoice_payload=f"buy_skin_{skin}_{user_id}",
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@bot.message_handler(content_types=["successful_payment"])
def got_payment(message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload

    if payload.startswith("buy_skin_"):
        item = payload.split("_")[2]

        cursor.execute('''    
            INSERT INTO user_skins (user_id, skin, quantity)    
            VALUES (?, ?, 1)    
            ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1    
        ''', (user_id, item))    

        conn.commit()    
        bot.send_message(message.chat.id, f"‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {item}!")

@bot.message_handler(commands=["zerocoin"])
def transfer_zerocoin(message):
    user_id = message.from_user.id
    args = message.text.split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ—Ä–æ–∫–æ–∏–Ω–æ–≤
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /zerocoin [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n–ü—Ä–∏–º–µ—Ä: `/zerocoin 2`", parse_mode="Markdown")
        return

    amount = int(args[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–µ—Ä–æ–∫–æ–∏–Ω—ã!")
        return

    target_id = message.reply_to_message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    cursor.execute("SELECT zerocoin FROM users WHERE user_id = ?", (user_id,))
    sender_balance = cursor.fetchone()

    if not sender_balance or sender_balance[0] < amount:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–µ—Ä–æ–∫–æ–∏–Ω—ã —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∑–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    cursor.execute("UPDATE users SET zerocoin = zerocoin - ? WHERE user_id = ?", (amount, user_id))
    cursor.execute("UPDATE users SET zerocoin = zerocoin + ? WHERE user_id = ?", (amount, target_id))
    conn.commit()

    bot.reply_to(message.reply_to_message, f"üéâ –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω–æ {amount} üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω–∞(–æ–≤) –æ—Ç {message.from_user.first_name}!")
    bot.send_message(message.chat.id, f"‚úÖ {message.from_user.first_name} –ø–µ—Ä–µ–¥–∞–ª {amount} üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω–∞ {message.reply_to_message.from_user.first_name}!")

from telebot.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
@bot.message_handler(func=lambda message: message.text == "üèÜ –∫—É–ø–∏—Ç—å VIP")
def donate_message(message):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("VIP –Ω–∞ 1 –Ω–µ–¥–µ–ª—é –∑–∞ 2 üåü", callback_data="vip_1_week"),
               InlineKeyboardButton("VIP –Ω–∞ 1 –º–µ—Å—è—Ü –∑–∞ 5 üåü", callback_data="vip_1_month"),
               InlineKeyboardButton("VIP –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –∑–∞ 14 üåü", callback_data="vip_3_months"),
               InlineKeyboardButton("VIP –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 25 üåü", callback_data="vip_forever"))
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ VIP üèÜ —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ @basir_l2 \n"
        "–≤—Å–µ –ø–ª—é—Å—ã VIP https://telegra.ph/FUNKCIYA-VIP--polzovatelej-02-26",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("vip_"))
def callback_query(call):
    user_id = call.from_user.id
    if call.data == "vip_1_week":
        prices = [LabeledPrice(label="VIP –Ω–∞ 1 –Ω–µ–¥–µ–ª—é", amount=2)]  # 200 = 2 üåü
        bot.send_invoice(call.message.chat.id, title="VIP –Ω–∞ 1 –Ω–µ–¥–µ–ª—é",
                         description="VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 1 –Ω–µ–¥–µ–ª—é", provider_token=PROVIDER_TOKEN,
                         currency=CURRENCY, prices=prices, start_parameter="vip_1_week",
                         invoice_payload=f"vip_1_week_{user_id}")
    elif call.data == "vip_1_month":
        prices = [LabeledPrice(label="VIP –Ω–∞ 1 –º–µ—Å—è—Ü", amount=5)]  # 500 = 5 üåü
        bot.send_invoice(call.message.chat.id, title="VIP –Ω–∞ 1 –º–µ—Å—è—Ü",
                         description="VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 1 –º–µ—Å—è—Ü", provider_token=PROVIDER_TOKEN,
                         currency=CURRENCY, prices=prices, start_parameter="vip_1_month",
                         invoice_payload=f"vip_1_month_{user_id}")
    elif call.data == "vip_3_months":
        prices = [LabeledPrice(label="VIP –Ω–∞ 3 –º–µ—Å—è—Ü–∞", amount=14)]  # 1400 = 14 üåü
        bot.send_invoice(call.message.chat.id, title="VIP –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
                         description="VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 3 –º–µ—Å—è—Ü–∞", provider_token=PROVIDER_TOKEN,
                         currency=CURRENCY, prices=prices, start_parameter="vip_3_months",
                         invoice_payload=f"vip_3_months_{user_id}")
    elif call.data == "vip_forever":
        prices = [LabeledPrice(label="VIP –Ω–∞–≤—Å–µ–≥–¥–∞", amount=25)]  # 2500 = 25 üåü
        bot.send_invoice(call.message.chat.id, title="VIP –Ω–∞–≤—Å–µ–≥–¥–∞",
                         description="VIP —Å—Ç–∞—Ç—É—Å –Ω–∞–≤—Å–µ–≥–¥–∞", provider_token=PROVIDER_TOKEN,
                         currency=CURRENCY, prices=prices, start_parameter="vip_forever",
                         invoice_payload=f"vip_forever_{user_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@bot.message_handler(content_types=["successful_payment"])
def got_payment(message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload

    if payload.startswith("vip_1_week_"):
        cursor.execute("UPDATE users SET vip_level = 0, vip_expiry = DATE('now', '+7 days') WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 1 –Ω–µ–¥–µ–ª—é!")
    elif payload.startswith("vip_1_month_"):
        cursor.execute("UPDATE users SET vip_level = 1, vip_expiry = DATE('now', '+1 month') WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 1 –º–µ—Å—è—Ü!")
    elif payload.startswith("vip_3_months_"):
        cursor.execute("UPDATE users SET vip_level = 2, vip_expiry = DATE('now', '+3 months') WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 3 –º–µ—Å—è—Ü–∞!")
    elif payload.startswith("vip_forever_"):
        cursor.execute("UPDATE users SET vip_level = 3, vip_expiry = NULL WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞–≤—Å–µ–≥–¥–∞!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
@bot.message_handler(commands=['pt_z'])
def reset_pets(message):
    user_id = message.from_user.id

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE pets SET pet_count = 0, pet_photo = NULL, last_collect = NULL WHERE user_id = ?", (user_id,))
    conn.commit()

    bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–æ–º—Ü–∞—Ö —É–¥–∞–ª–µ–Ω—ã.")

import os
import datetime

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã 'pets'
cursor.execute("PRAGMA table_info(pets);")
columns = [column[1] for column in cursor.fetchall()]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ 'pet_photo'
if "pet_photo" not in columns:
    cursor.execute("ALTER TABLE pets ADD COLUMN pet_photo TEXT DEFAULT NULL")

conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /–ø—Ç - –ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–∞—Ö
@bot.message_handler(commands=['pt'])
def pets_info(message):
    user_id = message.from_user.id

    cursor.execute("SELECT pet_count, pet_photo, pet_pats FROM pets WHERE user_id = ?", (user_id,))
    pet_data = cursor.fetchone()
    
    pet_count = pet_data[0] if pet_data else 0
    daily_income = pet_count * 200
    pet_pats = pet_data[2] if pet_data else 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–π
    pet_photo = pet_data[1] if pet_data and pet_data[1] else None

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–π
    daily_income += pet_pats * 10  # –ö–∞–∂–¥—ã–π –ø–∞—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –Ω–∞ 10 GRAM

    text = f"üê∂ –£ –≤–∞—Å {pet_count} –ø–∏—Ç–æ–º—Ü–µ–≤.\nüí∞ –û–Ω–∏ –¥–∞—é—Ç {daily_income} GRAM –≤ –¥–µ–Ω—å.\nüëã –ü–∏—Ç–æ–º–µ—Ü –±—ã–ª –ø–æ–≥–ª–∞–∂–µ–Ω {pet_pats} —Ä–∞–∑."

    keyboard = types.InlineKeyboardMarkup()
    buy_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (6000 GRAM)", callback_data="buy_pet")
    upload_photo_button = types.InlineKeyboardButton("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload_pet_photo")
    pat_button = types.InlineKeyboardButton(f"üëã –ü–æ–≥–ª–∞–¥–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ ({pet_pats})", callback_data="pat_pet")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
    keyboard.add(buy_button, upload_photo_button, pat_button)

    if pet_photo:
        bot.send_photo(message.chat.id, pet_photo, caption=text, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–ª–∞–¥–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞"
@bot.callback_query_handler(func=lambda call: call.data == "pat_pet")
def pat_pet(call):
    user_id = call.from_user.id

    cursor.execute("SELECT pet_pats, last_pat FROM pets WHERE user_id = ?", (user_id,))
    pet_data = cursor.fetchone()

    if not pet_data:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤!")
        return

    pet_pats, last_pat = pet_data

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.date.today().isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–ª–∞–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ —Å–µ–≥–æ–¥–Ω—è
    if last_pat == today:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ–≥–ª–∞–¥–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–π –Ω–∞ 1
    cursor.execute("UPDATE pets SET pet_pats = pet_pats + 1, last_pat = ? WHERE user_id = ?", (today, user_id))
    conn.commit()

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏–π
    daily_income = (pet_pats + 1) * 10
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (daily_income, user_id))
    conn.commit()

    bot.answer_callback_query(call.id, "–í—ã –ø–æ–≥–ª–∞–¥–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞! üêæ")
    bot.send_message(call.message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–∞ {pet_pats + 1} GRAM –±–æ–ª—å—à–µ –≤ –¥–µ–Ω—å!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞"
@bot.callback_query_handler(func=lambda call: call.data == "buy_pet")
def buy_pet(call):
    user_id = call.from_user.id

    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data or user_data[0] < 6000:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM!")
        return

    cursor.execute("UPDATE users SET gram = gram - 6000 WHERE user_id = ?", (user_id,))
    cursor.execute("INSERT INTO pets (user_id, pet_count, last_collect) VALUES (?, 1, ?) ON CONFLICT(user_id) DO UPDATE SET pet_count = pet_count + 1",
                   (user_id, datetime.date.today().isoformat()))
    conn.commit()

    bot.answer_callback_query(call.id, "–í—ã –∫—É–ø–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞! üê∂")
    bot.send_message(call.message.chat.id, "üéâ –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω! –∑–∞ 6,000 –¢–µ–ø–µ—Ä—å –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç 200 GRAM –≤ –¥–µ–Ω—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞"
@bot.callback_query_handler(func=lambda call: call.data == "upload_pet_photo")
def request_pet_photo(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")

    bot.register_next_step_handler(call.message, save_pet_photo)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞
def save_pet_photo(message):
    if not message.photo:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    user_id = message.from_user.id
    file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ

    cursor.execute("UPDATE pets SET pet_photo = ? WHERE user_id = ?", (file_id, user_id))
    conn.commit()

    bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    bot.send_photo(message.chat.id, file_id, caption="–í–æ—Ç –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü!")

# –ö–æ–º–∞–Ω–¥–∞ /—Å–±–æ—Ä - –°–±–æ—Ä –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö GRAM —Å –ø–∏—Ç–æ–º—Ü–µ–≤
@bot.message_handler(commands=['—Å–±–æ—Ä'])
def collect_grams(message):
    user_id = message.from_user.id
    today = datetime.date.today().isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤
    cursor.execute("SELECT pet_count, last_collect FROM pets WHERE user_id = ?", (user_id,))
    pet_data = cursor.fetchone()

    if not pet_data or pet_data[0] == 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤! –ö—É–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /–ø—Ç.")
        return

    pet_count, last_collect = pet_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±–∏—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GRAM —Å–µ–≥–æ–¥–Ω—è
    if last_collect == today:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ GRAM —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    daily_income = pet_count * 200
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (daily_income, user_id))
    cursor.execute("UPDATE pets SET last_collect = ? WHERE user_id = ?", (today, user_id))
    conn.commit()

    bot.send_message(message.chat.id, f"üí∞ –í—ã —Å–æ–±—Ä–∞–ª–∏ {daily_income} GRAM —Å –ø–∏—Ç–æ–º—Ü–µ–≤!")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute('''
CREATE TABLE IF NOT EXISTS announcements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    text TEXT,
    time_added INTEGER
)
''')
conn.commit()

@bot.message_handler(content_types=["photo", "video", "document", "audio", "video_note", "voice"])
def send_media_to_admin(message):
    user_id = message.from_user.id
    chat_type = message.chat.type  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if chat_type != "private":  # –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–° –±–æ—Ç–∞
        return

    username = message.from_user.username or f"ID: {user_id}"

    # –£–∫–∞–∑—ã–≤–∞–µ–º admin_id
    admin_id = 6392028972

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if message.photo:
        media = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
        caption = f"üì∏ –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç @{username}"
        bot.send_photo(admin_id, media, caption=caption)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ
    elif message.video:
        media = message.video.file_id  # –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ
        caption = f"üé• –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç @{username}"
        bot.send_video(admin_id, media, caption=caption)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    elif message.document:
        media = message.document.file_id  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        caption = f"üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç @{username}"
        bot.send_document(admin_id, media, caption=caption)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ
    elif message.audio:
        media = message.audio.file_id  # –ü–æ–ª—É—á–∞–µ–º ID –∞—É–¥–∏–æ
        caption = f"üé∂ –ù–æ–≤–æ–µ –∞—É–¥–∏–æ –æ—Ç @{username}"
        bot.send_audio(admin_id, media, caption=caption)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif message.voice:
        media = message.voice.file_id  # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        caption = f"üé§ –ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}"
        bot.send_voice(admin_id, media, caption=caption)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å
    elif message.video_note:
        media = message.video_note.file_id  # –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏
        caption = f"üé¨ –ù–æ–≤–∞—è –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –æ—Ç @{username}"
        bot.send_video_note(admin_id, media, caption=caption)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    bot.send_message(message.chat.id, "‚úÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
def ask_for_announcement_text(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

    # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler(message, save_announcement)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_announcement(message):
    text = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username
    time_added = int(datetime.datetime.now().timestamp())  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π timestamp

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
        INSERT INTO announcements (user_id, username, text, time_added)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, text, time_added))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–¥–æ—Å–∫–∞ (–≤—ã–≤–æ–¥–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
@bot.message_handler(commands=["doska"])
def show_announcements(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT username, time_added, text FROM announcements ORDER BY time_added DESC")
    announcements = cursor.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if not announcements:
        bot.send_message(message.chat.id, "üö´ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = "üìã –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n"

    for announcement in announcements:
        username, time_added, text = announcement
        formatted_time = datetime.datetime.fromtimestamp(time_added).strftime('%Y-%m-%d %H:%M:%S')
        response += f"üë§ @{username}:\n{text}\nüìÖ {formatted_time}\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
    bot.send_message(message.chat.id, response)                                                    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_all_announcements():
    cursor.execute("DELETE FROM announcements")
    conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /doska_z (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
@bot.message_handler(commands=["doska_z"])
def clear_announcements(message):
    delete_all_announcements()
    bot.send_message(message.chat.id, "üö´ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")    

@bot.message_handler(commands=['–∞–¥–º–∏–Ω–∏'])
def show_admins(message):
    chat_id = message.chat.id
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        admins = bot.get_chat_administrators(chat_id)
        if not admins:
            bot.send_message(chat_id, "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        creator = None
        deputies = []
        helpers = []
        others = []

        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ä–æ–ª—è–º
        for admin in admins:
            if admin.status == 'creator':  # –°–æ–∑–¥–∞—Ç–µ–ª—å —á–∞—Ç–∞
                creator = admin.user
            elif admin.status == 'administrator':  # –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å
                deputies.append(admin.user)
            elif admin.status == 'member':  # –ü–æ–º–æ—â–Ω–∏–∫
                helpers.append(admin.user)
            else:  # –ü—Ä–æ—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
                others.append(admin.user)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_list = "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞:</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        if creator:
            admin_list += f"üëë <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{creator.username or f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {creator.id}'}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π
        if deputies:
            admin_list += "üíº <b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏:</b>\n"
            for deputy in deputies:
                admin_list += f"‚Äî @{deputy.username or f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deputy.id}'}\n"
            admin_list += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
        if helpers:
            admin_list += "ü§ù <b>–ü–æ–º–æ—â–Ω–∏–∫–∏:</b>\n"
            for helper in helpers:
                admin_list += f"‚Äî @{helper.username or f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {helper.id}'}\n"
            admin_list += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—á–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if others:
            admin_list += "‚≠ê <b>–î—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
            for other in others:
                admin_list += f"‚Äî @{other.username or f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {other.id}'}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        bot.send_message(
            chat_id,
            admin_list,
            parse_mode="HTML"
        )
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

import datetime
from datetime import datetime

@bot.message_handler(regexp="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def update_handler(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    cursor.execute("SELECT COUNT(*) FROM users")  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(gram) FROM users")  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤
    total_grams = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT SUM(stars) FROM users")  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—Å–æ–≤
    total_stars = cursor.fetchone()[0] or 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    update_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:**\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
        f"ü™ô –í—Å–µ–≥–æ GRAM: {total_grams:.2f}\n"
        f"üåü –í—Å–µ–≥–æ Stars: {total_stars:.2f}\n\n"
        "üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        "üì¢ –ö–∞–Ω–∞–ª –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º: [valyta_Gram_stras](https://t.me/valyta_Gram_stras)\n"
        "üí¨ –ò–≥—Ä–æ–≤–æ–π —á–∞—Ç: [GVB_klan](https://t.me/GVB_klan)\n"
        "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: [@basir_l2](https://t.me/basir_l2)\n"
         "‚öôÔ∏è –ë–∞–≥–∏ –∏ –∏–¥–µ–∏: [–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è](https://t.me/laborotory_2)\n"
               )

    bot.send_message(
        message.chat.id, 
        update_text, 
        parse_mode="Markdown"
    )
          
@bot.message_handler(commands=['1–±–∞–Ω'])
def ban_user(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.send_message(message.chat.id, "üî¥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–±–∞–Ω –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    banned_user_id = message.reply_to_message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("DELETE FROM users WHERE user_id = ?", (banned_user_id,))
    cursor.execute("DELETE FROM game_stats WHERE user_id = ?", (banned_user_id,))
    cursor.execute("DELETE FROM skins WHERE user_id = ?", (banned_user_id,))
    cursor.execute("DELETE FROM donations WHERE user_id = ?", (banned_user_id,))
    cursor.execute("DELETE FROM clan_members WHERE user_id = ?", (banned_user_id,))
    conn.commit()

    bot.send_message(
        message.chat.id, 
        f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} ({banned_user_id}) –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
        "–¢–µ–ø–µ—Ä—å –æ–Ω –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ –±–æ—Ç–µ. üëª"
    )

@bot.message_handler(commands=['–≤—Å–µ–º'])
def give_all(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/–≤—Å–µ–º 500`", parse_mode="Markdown")
        return

    amount = int(args[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    
    if not users:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è GRAM.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("UPDATE users SET gram = gram + ?", (amount,))
    conn.commit()

    total_users = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    total_grams = 0  # –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    for user in users:
        try:
            bot.send_message(user[0], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 8 –ú–∞—Ä—Ç–∞! üíù –ñ–µ–ª–∞—é –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ. {amount} GRAM ")
            total_users += 1
            total_grams += amount
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\nüë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}\nüí∞ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {total_grams} GRAM"
    )

@bot.message_handler(regexp="üì¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞")
def invite_bot(message):
    user_id = message.from_user.id
    invite_link = f"https://t.me/{bot.get_me().username}?startgroup=true"

    bot.send_message(
        message.chat.id,
        f"‚ûï –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{invite_link}\n\n"
        "üí∞ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 5,000 GRAM!",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞", url=invite_link)
        )
    )
    
@bot.my_chat_member_handler()
def track_bot_addition_removal(update):
    chat_id = update.chat.id
    user_id = update.from_user.id
    status = update.new_chat_member.status  

    if status in ["administrator", "member"]:  # –ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω
        cursor.execute("SELECT chat_id FROM bot_channels WHERE chat_id = ?", (chat_id,))
        existing_chat = cursor.fetchone()

        if not existing_chat:  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª/—á–∞—Ç –Ω–æ–≤—ã–π
            cursor.execute("INSERT INTO bot_channels (chat_id, user_id) VALUES (?, ?)", (chat_id, user_id))
            conn.commit()
            
            cursor.execute("UPDATE users SET gram = gram + 5000 WHERE user_id = ?", (user_id,))
            conn.commit()
            
            bot.send_message(user_id, "‚úÖ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7,000 GRAM.")
        else:
            bot.send_message(user_id, "ü§ñ –ë–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç/–∫–∞–Ω–∞–ª.")
    
    elif status in ["kicked", "left"]:  # –ï—Å–ª–∏ –±–æ—Ç —É–¥–∞–ª–µ–Ω
        cursor.execute("SELECT user_id FROM bot_channels WHERE chat_id = ?", (chat_id,))
        owner = cursor.fetchone()

        if owner:
            owner_id = owner[0]
            cursor.execute("UPDATE users SET gram = gram - 5000 WHERE user_id = ?", (owner_id,))
            conn.commit()

            bot.send_message(owner_id, "‚ùå –í—ã —É–¥–∞–ª–∏–ª–∏ –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞. –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ 5,000 GRAM.")
        
        cursor.execute("DELETE FROM bot_channels WHERE chat_id = ?", (chat_id,))
        conn.commit()
                                           
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(func=lambda message: message.text == "üì¢ –†–µ–∫–ª–∞–º–∞")
def ask_for_advertisement(message):
    if message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:")
        bot.register_next_step_handler(msg, send_advertisement)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

def send_advertisement(message):
    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        is_forwarded = True  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    else:
        is_forwarded = False  # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ —Ç.–¥.

    bot.send_message(message.chat.id, "üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    sent_users = 0

    for user in users:
        user_id = user[0]
        try:
            if is_forwarded:
                bot.forward_message(user_id, message.chat.id, message.message_id)  # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞
            else:
                bot.copy_message(user_id, message.chat.id, message.message_id)  # –ü–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –±–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            sent_users += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç—ã
    chat_list = [CHAT_ID_1, CHAT_ID_2]
    sent_chats = 0

    for chat_id in chat_list:
        try:
            if is_forwarded:
                bot.forward_message(chat_id, message.chat.id, message.message_id)
            else:
                bot.copy_message(chat_id, message.chat.id, message.message_id)
            sent_chats += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")

    # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    bot.send_message(
        message.chat.id,
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üë§ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {sent_users}\n"
        f"üí¨ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç—ã: {sent_chats}"
    )           

import datetime
import random

# –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞
waiting_for_photo = False
bonus_photo = None

@bot.message_handler(commands=["–¥–æ–Ω—É"])
def request_bonus_photo(message):
    global waiting_for_photo
    if message.from_user.id == admin_id:
        waiting_for_photo = True
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –±–æ–Ω—É—Å–∞.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(content_types=['photo'])
def receive_bonus_photo(message):
    global waiting_for_photo, bonus_photo
    if waiting_for_photo and message.from_user.id == admin_id:
        bonus_photo = message.photo[-1].file_id
        waiting_for_photo = False
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –±–æ–Ω—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä
cursor.execute('''
CREATE TABLE IF NOT EXISTS game_progress (
    user_id INTEGER PRIMARY KEY,
    games_played INTEGER DEFAULT 0,
    last_bonus_level INTEGER DEFAULT 0
)
''')
conn.commit()

@bot.message_handler(regexp="üéÅ –ë–æ–Ω—É—Å")
def daily_bonus(message):
    user_id = message.from_user.id
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    
    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result and result[0] == today:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞. ‚è≥")
        return
    
    bonus_amount = random.randint(100, 750)
    
    cursor.execute("UPDATE users SET gram = gram + ?, last_bonus = ? WHERE user_id = ?", 
                   (bonus_amount, today, user_id))
    conn.commit()
    
    if bonus_photo:
        bot.send_photo(message.chat.id, bonus_photo, caption=f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_amount} GRAM! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º. üéÅ")
    else:
        bot.send_message(message.chat.id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus_amount} GRAM! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º. üéÅ")

# –ö–æ–º–∞–Ω–¥–∞ /vp –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –¥–æ–Ω–∞—Ç–∞–º
@bot.message_handler(commands=['vp'])
def view_donations(message):
    cursor.execute("SELECT u.username, d.donation_amount FROM donations d JOIN users u ON d.user_id = u.user_id WHERE d.donation_amount > 0 ORDER BY d.donation_amount DESC")
    results = cursor.fetchall()

    if not results:
        bot.send_message(message.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —è—Ä–∫–∏–π —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating = "üèÜ <b>–¢–æ–ø –¥–æ–Ω–∞—Ç–æ—Ä–æ–≤:</b> üèÜ\n\n"
    for i, (username, donation_amount) in enumerate(results, start=1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "‚≠ê"
        rating += f"{medal} <b>{username}</b> ‚Äî <b>{donation_amount:.2f} GRAM</b>\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è—Ä–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º
    bot.send_message(
        message.chat.id, 
        rating, 
        parse_mode='HTML',
        reply_markup=types.ReplyKeyboardRemove()
    )

cursor.execute('''
CREATE TABLE IF NOT EXISTS pets (
    user_id INTEGER PRIMARY KEY,
    pet_name TEXT,
    pet_image TEXT
)
''')
conn.commit()

@bot.message_handler(commands=['ref'])
def show_referrals_top(message):
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT u.username, COUNT(r.user_id) AS ref_count
        FROM users u
        LEFT JOIN users r ON u.user_id = r.referrer_id
        GROUP BY u.user_id
        ORDER BY ref_count DESC
        LIMIT 10
    """)
    referrals = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if referrals:
        top_text = "üèÖ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n"
        for idx, (username, ref_count) in enumerate(referrals, 1):
            top_text += f"{idx}. {username} ‚Äî {ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    else:
        top_text = "üö´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    bot.send_message(message.chat.id, top_text)

admin_id = 6392028972  

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
with conn:
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0
        )
    """)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GRAM"
@bot.message_handler(regexp="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
def earn_gram_handler(message):
    keyboard = types.InlineKeyboardMarkup()
    ref_button = types.InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")
    reaction_button = types.InlineKeyboardButton("‚ù§Ô∏è –†–µ–∞–∫—Ü–∏–∏", callback_data="reactions")
    keyboard.add(ref_button, reaction_button)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ GRAM:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—ã"
@bot.callback_query_handler(func=lambda call: call.data == "referrals")
def referrals_handler(call):
    user_id = call.from_user.id
    username = call.from_user.username or f"ID: {user_id}"  # –ï—Å–ª–∏ username –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
        total_referrals = cursor.fetchone()[0] or 0

    earnings_from_referrals = total_referrals * 1500

    ref_text = (
        f"üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: [–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å]({ref_link})\n"
        f"üí∞ 1 —Ä–µ—Ñ–µ—Ä–∞–ª = 1500 GRAM\n"
        f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals}\n"
        f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earnings_from_referrals} GRAM\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ GRAM!"
    )

    bot.send_message(call.message.chat.id, ref_text, parse_mode="Markdown", disable_web_page_preview=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "—Ä–µ–∞–∫—Ü–∏–∏"
reaction_users = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–∞–∫—Ü–∏–∏"
@bot.callback_query_handler(func=lambda call: call.data == "reactions")
def reactions_handler(call):
    user_id = call.from_user.id
    reaction_users[user_id] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É

    bot.send_message(
        call.message.chat.id,
        "üîπ **–ü–æ—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∏ –≥—Ä–∞–º–º—ã !** \n\n"
        "‚ù§Ô∏è **–û–±—ã—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏** ‚Äì **500 –≥—Ä–∞–º–º**\n"
        "üîÅ **3 —Ä–µ–∞–∫—Ü–∏–∏** = **1500 –≥—Ä–∞–º–º**\n"
        "‚≠ê **–ü–ª–∞—Ç–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏** ‚Äì **5000 –≥—Ä–∞–º–º** –∑–∞ 1 —à—Ç.\n\n"
        "üì∏ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–º–º—ã?**\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏ [üîó –ù–∞–∂–∞—Ç—å –∑–¥–µ—Å—å](https://t.me/kartina111/266) –∏ –æ—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é.\n"
        "2Ô∏è‚É£ –°–¥–µ–ª–∞–π **—Å–∫—Ä–∏–Ω—à–æ—Ç** —Å —Ç–≤–æ–µ–π —Ä–µ–∞–∫—Ü–∏–µ–π.\n"
        "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞.\n\n"
        "üéØ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–∏ **–≥—Ä–∞–º–º—ã!** üöÄ",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

@bot.message_handler(content_types=["photo"])
def receive_screenshot(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ç–µ—Ö, –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "—Ä–µ–∞–∫—Ü–∏–∏"
    if user_id not in reaction_users:
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–Ω–æ–≤–∞
    del reaction_users[user_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    username = message.from_user.username or f"ID: {user_id}"  # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
    keyboard = types.InlineKeyboardMarkup()
    approve_button = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_reaction_{user_id}")
    keyboard.add(approve_button)

    bot.send_photo(admin_id, message.photo[-1].file_id, caption=f"üì∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}", reply_markup=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_reaction_"))
def approve_reaction_handler(call):
    user_id = int(call.data.split("_")[-1])

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    with conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET balance = balance + 5000 WHERE user_id = ?", (user_id,))
    
    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        username = cursor.fetchone()
        username = username[0] if username else f"ID: {user_id}"

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
    bot.send_message(user_id, "üéâ –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 5000 GRAM.")
    bot.send_message(call.message.chat.id, f"‚úÖ –†–µ–∞–∫—Ü–∏—è –æ—Ç @{username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏—Å–ª–µ–Ω–æ 5000 GRAM.")

cursor.execute('''
CREATE TABLE IF NOT EXISTS secret_message_readers (
       user_id INTEGER,
       secret_id INTEGER,
       PRIMARY KEY (user_id, secret_id),
       FOREIGN KEY (secret_id) REFERENCES secret_messages(secret_id)
   );
''')
conn.commit()

from telebot import TeleBot, types

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∞—Ñ—Ç–æ–≤ (–ø–æ 10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
crafts = [
    "üéÑChristmas tree –∏–∑ +100üéÅ+100‚è≥ –ø—Ä–∏ ü™ö",
  "ü™ëchair –∏–∑ +35ü™µ –ø—Ä–∏ ü™ö",
  "‚ö∞Ô∏ècoffin –∏–∑ 100ü™µ+10ü¶¥ –ø—Ä–∏ ü™öüíî",    "üé®artist palette –∏–∑ üü£+üü°+üü¢+üîµ+üî¥+5ü™µ+5üí¶ –ø—Ä–∏ ü™ö",
  "üî≥white square button –∏–∑ +10üî≤",
  "‚òëÔ∏ècheck box with check –∏–∑ +10üî≥",
  "‚ôæÔ∏èinfinity –∏–∑ +10‚òëÔ∏è",
  "üî¢input numbers –∏–∑ +1Ô∏è‚É£+2Ô∏è‚É£3Ô∏è‚É£+4Ô∏è‚É£",
  "üíØhundred points –∏–∑ +101Ô∏è‚É£ –ø—Ä–∏üÜó",
  "üö™door –∏–∑ +50ü™µ –ø—Ä–∏ ü™ö",
  "ü™üwindow –∏–∑ +25ü™µ –ø—Ä–∏ ü™ö",        "üõèÔ∏èbed –∏–∑ 75ü™µ –ø—Ä–∏ ü™ö",
    "üè†house –∏–∑ +üõèÔ∏è+ü™ü+üö™+ü™ë+30ü™µ –ø—Ä–∏ ü™ö",
    "üèòÔ∏èhouses –∏–∑ +üè†+25ü™µ –ø—Ä–∏ ü™ö",
    "üèöÔ∏èderelict house –∏–∑ +üè†+1000‚è≥",
    "‚õ∞Ô∏èsnow-capped mountain –∏–∑ +1000ü™®",
    "üåàrainbow –∏–∑ +üíé+1000üî¶+350üí¶ –ø—Ä–∏ ‚õ∞Ô∏è",
    "üìÑpage facing up –∏–∑ +5‚¨ú",
    "ü´ßbubbles –∏–∑ +100üí¶",
    "üÜóOK Button –∏–∑ +1Ô∏è‚É£+2Ô∏è‚É£+3Ô∏è‚É£+4Ô∏è‚É£+5Ô∏è‚É£+6Ô∏è‚É£+7Ô∏è‚É£+8Ô∏è‚É£+9Ô∏è‚É£",
    "üè≥‚Äçüåàrainbow flag –∏–∑ +üü•+üüß+üü®+üü©+üü¶+üü™ –ø—Ä–∏ ‚ù§Ô∏è",
    "üíîbroken heart –∏–∑ +‚ù§Ô∏è+üíõ+üíö+üíô+ü§ç+ü§é+üíô+üíú+üñ§+üß°",
    "üíæfloppy disk –∏–∑ +üî¢+üÜó",
    "üîükeycap: 10 –∏–∑ +101Ô∏è‚É£",
    "üè≥white flag –∏–∑ +10‚¨ú+5üß∂ –ø—Ä–∏ ‚úÇÔ∏è",
    "üè¥black flag –∏–∑ +10‚¨õ+5üß∂ –ø—Ä–∏ ‚úÇÔ∏è"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–∞—Ñ—Ç–æ–≤
def send_crafts_page(chat_id, page=1):
    items_per_page = 10
    start = (page - 1) * items_per_page
    end = start + items_per_page
    page_crafts = crafts[start:end]
    text = "\n\n".join(page_crafts) if page_crafts else "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞."

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup(row_width=3)
    if page > 1:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}"))
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ö—Ä–∞—Ñ—Ç", callback_data="craft"))
    if end < len(crafts):
        markup.add(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}"))
    markup.add(types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))

    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–°—Ö–µ–º—ã")
def handle_scheme(message):
    send_crafts_page(message.chat.id, page=1)


@bot.callback_query_handler(func=lambda call: call.data.startswith("page_"))
def page_callback(call):
    page = int(call.data.split("_")[1])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="–ó–∞–≥—Ä—É–∑–∫–∞...")
    send_crafts_page(call.message.chat.id, page=page)


@bot.callback_query_handler(func=lambda call: call.data == "craft")
def craft_callback(call):
    bot.answer_callback_query(call.id, "‚öôÔ∏è –ö—Ä–∞—Ñ—Ç")
    bot.send_message(call.message.chat.id, "‚öôÔ∏è –ö—Ä–∞—Ñ—Ç")


@bot.callback_query_handler(func=lambda call: call.data == "close")
def close_callback(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)

from telebot import types

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.inline_handler(lambda query: query.query.startswith("—Å—Å"))
def inline_create_secret_message(query):
    try:
        args = query.query.split()
        if len(args) != 3:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>",
                    input_message_content=types.InputTextMessageContent(
                        message_text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        _, secret_text, activation_limit = args
        activation_limit = int(activation_limit)

        if activation_limit <= 0:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.",
                    input_message_content=types.InputTextMessageContent(
                        message_text="–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if not result or result[0] < 10:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–æ–∏—Ç 10 GRAM
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"–£ –≤–∞—Å {result[0] if result else 0} GRAM, –∞ –Ω—É–∂–Ω–æ 10 GRAM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ GRAM –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("UPDATE users SET gram = gram - 10 WHERE user_id = ?", (user_id,))
        cursor.execute('''
            INSERT INTO secret_messages (creator_id, secret_text, activation_limit, activations, activations_left)
            VALUES (?, ?, ?, 0, ?)
        ''', (user_id, secret_text, activation_limit, activation_limit))
        conn.commit()

        secret_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
        results = [
            types.InlineQueryResultArticle(
                id="secret_created",
                title=f"–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                description=f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID —Å–æ–æ–±—â–µ–Ω–∏—è: {secret_id}\nüîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}"
                ),
                reply_markup=create_secret_message_markup(secret_id)
            )
        ]
        bot.answer_inline_query(query.id, results)

    except ValueError:
        results = [
            types.InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.",
                input_message_content=types.InputTextMessageContent(
                    message_text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Å <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>."
                )
            )
        ]
        bot.answer_inline_query(query.id, results)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def create_secret_message_markup(secret_id):
    markup = types.InlineKeyboardMarkup()
    activate_button = types.InlineKeyboardButton(
        text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å",
        callback_data=f"read_secret_{secret_id}"
    )
    markup.add(activate_button)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–∏—Ç–∞—Ç—å")
@bot.callback_query_handler(func=lambda call: call.data.startswith("read_secret_"))
def read_secret(call):
       secret_id = int(call.data.split("_")[2])
       user_id = call.from_user.id

       # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—á–∏—Ç–∞–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ
       cursor.execute("SELECT 1 FROM secret_message_readers WHERE user_id = ? AND secret_id = ?", (user_id, secret_id))
       if cursor.fetchone():
           bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
           return

       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
       cursor.execute("SELECT secret_text, activations_left FROM secret_messages WHERE secret_id = ?", (secret_id,))
       secret = cursor.fetchone()

       if not secret:
           bot.answer_callback_query(call.id, "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
           return

       secret_text, activations_left = secret

       if activations_left <= 0:
           bot.answer_callback_query(call.id, "–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
           return

       # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ alert-—Ä–µ–∂–∏–º–µ
       bot.answer_callback_query(call.id, show_alert=True, text=secret_text)

       # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π
       cursor.execute("UPDATE secret_messages SET activations_left = activations_left - 1 WHERE secret_id = ?", (secret_id,))

       # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
       cursor.execute("INSERT INTO secret_message_readers (user_id, secret_id) VALUES (?, ?)", (user_id, secret_id))

       conn.commit()

       # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
       if activations_left - 1 == 0:
           markup = types.InlineKeyboardMarkup()
           closed_button = types.InlineKeyboardButton(
               text="–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ",
               callback_data="closed"
           )
           markup.add(closed_button)
           bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

craft_recipes = {
    "craft_money": {"üè† ": 1, "‚è≥": 1000, "result": "üèöÔ∏è"},
    "craft_heart": {"üü° ": 1, "üü¢": 1, "result": "üîµ"},
    "craft_glasses": {"üíß": 1, "result": "üí¶"},
    "craft_chair": {"ü™µ": 45, "ü™ö": 1, "result": "ü™ë"},
    "craft_door": {"ü™µ": 55, "ü™ö": 1, "result": "üö™"},
    "craft_window": {"ü™µ": 35, "ü™ö": 1, "result": "ü™ü"},
    "craft_bed": {"ü™µ": 80,  "ü™ö": 1, "result": "üõèÔ∏è"},  # –ù–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç
    "craft_house": {"ü™ë": 1, "üö™": 1, "ü™ü": 1, "ü™µ": 15, "üõèÔ∏è": 1, "ü™ö": 1,"result": "üè†"},  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—Ä–∞—Ñ—Ç
    "craft_bubble": {"üí¶": 100, "result": "ü´ß"},
    "craft_mountain": {"ü™®": 1000, "‚õèÔ∏è": 1, "result": "‚õ∞Ô∏è"},
    "craft_town": {"üè†": 3, "ü™µ": 25, "ü™ö": 1, "result": "üèòÔ∏è"},
    "craft_scarf": {"üß∂": 5, "üü•": 5, "üéóÔ∏è": 5, "ü™°": 1, "result": "üß£"},
    "craft_shirt": {"üß∂": 10, "üü¶": 10, "üéóÔ∏è": 15, "ü™°": 1, "result": "üëï"},
    "craft_night_city": {"üèòÔ∏è": 1, "üåö": 15, "üåü": 15, "result": "üåÉ"},
    "craft_broken_heart": {"‚ù§Ô∏è": 5, "üíõ": 1, "üíö": 1, "üíô": 1, "result": "üíî"},
    "craft_numbers": {"1Ô∏è‚É£": 1, "2Ô∏è‚É£": 1, "3Ô∏è‚É£": 1, "4Ô∏è‚É£": 1, "result": "üî¢"},
    "craft_101": {"1Ô∏è‚É£": 1, "1Ô∏è‚É£": 10, "result": "üîü"},
    "craft_100": {"1Ô∏è‚É£": 1, "2Ô∏è‚É£": 1, "3Ô∏è‚É£": 1, "4Ô∏è‚É£": 1, "üî¢": 1, "10üîü": 1, "result": "üíØ"},
    "craft_coffin": {"ü™µ": 150, "ü¶¥": 10, "result": "‚ö∞Ô∏è"},
    "craft_tree": {"üéÅ": 250, "‚è≥": 100, "result": "üéÑ"},
    "craft_square": {"üî≤": 10, "result": "üî≥"},  # –ù–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç
    "craft_big_square": {"üî≥": 10, "result": "‚òëÔ∏è"},  # –ù–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç
    "craft_infinity": {"‚òëÔ∏è": 10, "result": "‚ôæÔ∏è"},  # –ù–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç

 # –ù–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
  "craft_mosque": {"üè†": 1, "üõê": 1, "‚ò™Ô∏è": 1, "result": "üïå"},
  "craft_church": {"üè†": 1, "üõê": 1, "‚ò¶Ô∏è": 1, "result": "‚õ™"},
  "craft_synagogue": {"üè†": 1, "üõê": 1, "‚ú°Ô∏è": 1, "result": "üïç"},
  "craft_bank": {"üè†": 1, "üíµ": 1, "üí∑": 1, "üí≤": 10, "üõê": 1, "result": "üè¶"},
  "craft_black": {"‚óºÔ∏è": 5, "result": "‚¨õ"},
  "craft_black_flag": {"‚¨õ": 10, "üß∂": 5, "result": "üè¥"},
  "craft_white_flag": {"‚¨ú": 10, "üß∂": 5, "result": "üè≥Ô∏è"},
  "craft_white_large": {"‚óªÔ∏è": 5, "result": "‚¨ú"}
}


craft_list = list(craft_recipes.keys())  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∞—Ñ—Ç–æ–≤
CRAFTS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ö—Ä–∞—Ñ—Ç")
def craft_menu(message, page=0):
    keyboard = types.InlineKeyboardMarkup()

    start = page * CRAFTS_PER_PAGE
    end = start + CRAFTS_PER_PAGE
    for craft_key in craft_list[start:end]:
        craft_data = craft_recipes[craft_key]
        ingredients = " + ".join([f"{v} {k}" for k, v in craft_data.items() if k != "result"])
        button_text = f"{ingredients} = {craft_data['result']}"
        keyboard.add(types.InlineKeyboardButton(button_text, callback_data=f"{craft_key}_{page}"))

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏
    keyboard.add(types.InlineKeyboardButton("üî• –ü–µ—Ä–µ–ø–ª–∞–≤–∫–∞", callback_data=f"refine_page_{page}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"craft_page_{page-1}"))
    if end < len(craft_list):
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"craft_page_{page+1}"))

    if nav_buttons:
        keyboard.add(*nav_buttons)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("refine_page_"))
def refine_page(call):
    user_id = call.from_user.id
    page = int(call.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT skin, quantity FROM user_skins WHERE user_id = ?", (user_id,))
    user_skins = {row[0]: row[1] for row in cursor.fetchall()}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏
    available_skins = [skin for skin, quantity in user_skins.items() if quantity > 0]

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤
    if not available_skins:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏!")
        return

    keyboard = types.InlineKeyboardMarkup()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–æ–≤
    for i, skin in enumerate(available_skins[:15]):  # 3 x 5 = 15 —Å–∫–∏–Ω–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        keyboard.add(types.InlineKeyboardButton(skin, callback_data=f"refine_{skin}_{page}"))

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏
    refine_nav_buttons = []
    if page > 0:
        refine_nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"refine_page_{page-1}"))
    if len(available_skins) > (page + 1) * 15:
        refine_nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"refine_page_{page+1}"))

    if refine_nav_buttons:
        keyboard.add(*refine_nav_buttons)

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–Ω –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏ —Å–∫–∏–Ω–∞ –≤ –≤–æ—Å–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("refine_"))
def refine_skin(call):
    user_id = call.from_user.id
    skin, page = call.data.split("_")[1], int(call.data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω—ã–π —Å–∫–∏–Ω
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, skin))
    result = cursor.fetchone()

    if not result or result[0] < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ —Å–∫–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏!")
        return

    # –£–¥–∞–ª—è–µ–º —Å–∫–∏–Ω
    cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (user_id, skin))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å–∫
    cursor.execute('''
        INSERT INTO user_skins (user_id, skin, quantity)
        VALUES (?, ?, 1)
        ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
    ''', (user_id, "ü™î "))

    conn.commit()

    bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–≤–∏–ª–∏ {skin} –≤ –≤–æ—Å–∫!")
    bot.send_message(call.message.chat.id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–æ—Å–∫ –∑–∞ {skin}!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–µ—Ä–µ–ø–ª–∞–≤–∫–∏
    bot.delete_message(call.message.chat.id, call.message.message_id)
    refine_page(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("craft_page_"))
def change_page(call):
    page = int(call.data.split("_")[-1])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    craft_menu(call.message, page)

@bot.callback_query_handler(func=lambda call: call.data.startswith("craft_") and not call.data.startswith("craft_page_"))
def craft_item(call):
    user_id = call.from_user.id
    craft_type, page = call.data.rsplit("_", 1)
    page = int(page)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT skin, quantity FROM user_skins WHERE user_id = ?", (user_id,))
    user_skins = {row[0]: row[1] for row in cursor.fetchall()}

    if craft_type not in craft_recipes:
        return

    required_skins = craft_recipes[craft_type].copy()
    new_skin = required_skins.pop("result")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for skin, needed in required_skins.items():
        if user_skins.get(skin, 0) < needed:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!")
            return

    # –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–∫—Ä–æ–º–µ ‚õèÔ∏è –∏ ü™ö)
    for skin, needed in required_skins.items():
        if skin not in ["‚õèÔ∏è", "ü™ö", "ü™°"]:  # –≠—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ —Ç—Ä–∞—Ç—è—Ç—Å—è
            cursor.execute("UPDATE user_skins SET quantity = quantity - ? WHERE user_id = ? AND skin = ?", (needed, user_id, skin))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    cursor.execute('''
        INSERT INTO user_skins (user_id, skin, quantity)
        VALUES (?, ?, 1)
        ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
    ''', (user_id, new_skin))
    
    conn.commit()

    bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {new_skin}!")
    bot.send_message(call.message.chat.id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ {new_skin}!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞
    bot.delete_message(call.message.chat.id, call.message.message_id)
    craft_menu(call.message, page)

import random
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé∞ –ö–∞–∑–∏–Ω–æ"
@bot.message_handler(regexp="üé∞ –ö–∞–∑–∏–Ω–æ")
def casino_handler(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    
    if not user_data or user_data[0] < 25:
        bot.send_message(
            message.chat.id, 
            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –∏–≥—Ä—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ GRAM.",
            reply_markup=main_menu()
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º 25 GRAM –∑–∞ –ø–æ–ø—ã—Ç–∫—É
    cursor.execute("UPDATE users SET gram = gram - 25 WHERE user_id = ?", (user_id,))
    conn.commit()
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–∞
    symbols = ["7Ô∏è‚É£", "üçã", "üçá", "üçí", "üçâ"]
    spin = [random.choice(symbols) for _ in range(3)]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    result_text = "üé∞ | " + " | ".join(spin) + " | üé∞\n\n"
    if spin == ["7Ô∏è‚É£", "7Ô∏è‚É£", "7Ô∏è‚É£"]:
        # –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ "777", –Ω–∞–≥—Ä–∞–¥–∞ 1000 GRAM
        cursor.execute("UPDATE users SET gram = gram + 1000 WHERE user_id = ?", (user_id,))
        conn.commit()
        result_text += "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª–æ 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1000 GRAM! üéâ"
    elif spin[0] == spin[1] == spin[2]:
        # –ï—Å–ª–∏ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ (–Ω–µ 7Ô∏è‚É£), –Ω–∞–≥—Ä–∞–¥–∞ 500 GRAM
        cursor.execute("UPDATE users SET gram = gram + 500 WHERE user_id = ?", (user_id,))
        conn.commit()
        result_text += f"üéâ –í–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ {spin[0]}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 500 GRAM! üéâ"
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ
        result_text += "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ -25 –≥—Ä–∞–º–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(
        message.chat.id, 
        result_text, 
        reply_markup=main_menu()
    )

duels = {}

@bot.message_handler(commands=['–¥—É–µ–ª—å'])
def duel_request(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –¥—É—ç–ª—å)
    for opponent_id, duel in duels.items():
        if duel['challenger'] == user_id:
            bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –≤—ã–∑–≤–∞–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å!")
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É—ç–ª—å —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    duels[user_id] = {'challenger': user_id}

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
    keyboard = types.InlineKeyboardMarkup()
    accept_button = types.InlineKeyboardButton("‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_duel_{user_id}")
    keyboard.add(accept_button)

    bot.send_message(
        message.chat.id,
        f"üéØ <b>{message.from_user.first_name}</b> –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–≥–æ-—Ç–æ –Ω–∞ –¥—É—ç–ª—å! –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_duel_"))
def accept_duel(call):
    opponent_id = call.from_user.id
    duel_data = call.data.split("_")
    challenger_id = int(duel_data[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
    if challenger_id not in duels or duels[challenger_id]['challenger'] == opponent_id:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
    del duels[challenger_id]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä—ã (–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞)
    keyboard = types.InlineKeyboardMarkup()
    options = ["‚úä", "‚úåÔ∏è", "ü§ö"]
    for option in options:
        keyboard.add(types.InlineKeyboardButton(option, callback_data=f"rps_{challenger_id}_{opponent_id}_{option}"))

    bot.send_message(call.message.chat.id, f"üõ°Ô∏è {call.from_user.first_name} –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=keyboard)

rps_choices = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@bot.callback_query_handler(func=lambda call: call.data.startswith("rps_"))
def play_rps(call):
    data = call.data.split("_")
    challenger_id = int(data[1])
    opponent_id = int(data[2])
    player_choice = data[3]

    player_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª –ª–∏ —Ö–æ–¥ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
    if (challenger_id, opponent_id) not in rps_choices:
        rps_choices[(challenger_id, opponent_id)] = {player_id: player_choice}
        bot.answer_callback_query(call.id, "–í—ã —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä! –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    rps_choices[(challenger_id, opponent_id)][player_id] = player_choice
    choices = rps_choices.pop((challenger_id, opponent_id))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    challenger_choice = choices[challenger_id]
    opponent_choice = choices[opponent_id]

    results = {
        ("‚úä", "‚úåÔ∏è"): challenger_id, ("‚úåÔ∏è", "ü§ö"): challenger_id, ("ü§ö", "‚úä"): challenger_id,  # –ü–æ–±–µ–¥–∞ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ
        ("‚úåÔ∏è", "‚úä"): opponent_id, ("ü§ö", "‚úåÔ∏è"): opponent_id, ("‚úä", "ü§ö"): opponent_id  # –ü–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    }

    if challenger_choice == opponent_choice:
        winner_id = None
    else:
        winner_id = results.get((challenger_choice, opponent_choice))

    if winner_id:
        loser_id = challenger_id if winner_id == opponent_id else opponent_id

        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–æ—Ö–≤–∞–ª—É (–∏–ª–∏ GRAM, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ)
        bot.send_message(call.message.chat.id,
            f"‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üé≠ {call.from_user.first_name} –≤—ã–±—Ä–∞–ª: {player_choice}\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {bot.get_chat_member(call.message.chat.id, winner_id).user.first_name}\n\n"
        )
    else:
        bot.send_message(call.message.chat.id, "‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π!")     

@bot.message_handler(commands=['–ø–∂'])
def donate_invite(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        text=f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å 100 GRAM {username}",
        callback_data=f"donate_{user_id}"
    )
    keyboard.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ —á–∞—Ç
    bot.send_message(
        message.chat.id,
        f"{username} –ø—Ä–æ—Å–∏—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –µ–º—É 100 GRAM. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å!",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("donate_"))
def handle_donation(call):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Ç–æ–≥–æ, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∫–Ω–æ–ø–∫—É)
    receiver_id = int(call.data.split("_")[1])
    sender_id = call.from_user.id
    sender_username = call.from_user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É) 100 GRAM
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (sender_id,))
    result = cursor.fetchone()

    if not result or result[0] < 100:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥: —Å–ø–∏—Å—ã–≤–∞–µ–º 100 GRAM —Å –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    cursor.execute("UPDATE users SET gram = gram - 100 WHERE user_id = ?", (sender_id,))
    cursor.execute("INSERT OR IGNORE INTO users (user_id, gram) VALUES (?, 0)", (receiver_id,))
    cursor.execute("UPDATE users SET gram = gram + 100 WHERE user_id = ?", (receiver_id,))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
    bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ 100 GRAM.")
    bot.send_message(
        sender_id,
        f"–í—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª–∏ 100 GRAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}."
    )
    bot.send_message(
        receiver_id,
        f"{sender_username} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª(–∞) –≤–∞–º 100 GRAM!"
    )()

@bot.message_handler(commands=['–º–æ–π_–∫–ª–∞–Ω'])
def my_clan(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª–∞–Ω
    cursor.execute("SELECT clans.name FROM clans WHERE creator_id = ?", (user_id,))
    clan = cursor.fetchone()

    if clan:
        # –ï—Å–ª–∏ –∫–ª–∞–Ω –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        clan_name = clan[0]
        cursor.execute("""
            SELECT u.username, cm.level FROM clan_members cm
            JOIN users u ON cm.user_id = u.user_id
            WHERE cm.clan_id = (SELECT id FROM clans WHERE name = ?)
        """, (clan_name,))
        members = cursor.fetchall()

        member_list = f"üëë <b>–ö–ª–∞–Ω:</b> {clan_name}\n\n"
        member_list += f"üëë <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{message.from_user.username or f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}'}\n\n"
        member_list += "üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
        for i, (username, level) in enumerate(members, start=1):
            member_list += f"{i}. @{username} ‚Äî –£—Ä–æ–≤–µ–Ω—å: {level}\n"

        bot.send_message(
            message.chat.id,
            member_list,
            parse_mode="HTML",
            reply_markup=clan_management_menu(clan_name)
        )
    else:
        # –ï—Å–ª–∏ –∫–ª–∞–Ω–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
        user_stars = cursor.fetchone()[0]

        if user_stars < 150:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞. –ù—É–∂–Ω–æ 150 Stars."
            )
            return

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞:")
        bot.register_next_step_handler(msg, create_clan, user_id)


def create_clan(message, user_id):
    clan_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª–∞–Ω
    cursor.execute("SELECT id FROM clans WHERE name = ?", (clan_name,))
    if cursor.fetchone():
        bot.send_message(message.chat.id, "–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º Stars —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE users SET stars = stars - 150 WHERE user_id = ?", (user_id,))
    conn.commit()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–Ω
    cursor.execute("INSERT INTO clans (name, creator_id) VALUES (?, ?)", (clan_name, user_id))
    conn.commit()

    bot.send_message(message.chat.id, f"–ö–ª–∞–Ω '{clan_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω
    cursor.execute("INSERT INTO clan_members (user_id, clan_id) VALUES (?, (SELECT id FROM clans WHERE name = ?))", (user_id, clan_name))
    conn.commit()
    
    
def clan_management_menu(clan_name):
    keyboard = types.InlineKeyboardMarkup()
    join_button = types.InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å", callback_data=f"join_{clan_name}")
    leave_button = types.InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å", callback_data=f"leave_{clan_name}")
    keyboard.add(join_button, leave_button)
    return keyboard
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("join_"))
def join_clan(call):
    clan_name = call.data.split("_")[1]
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–ª–∞–Ω–µ
    cursor.execute("""
        SELECT cm.clan_id FROM clan_members cm
        JOIN clans c ON cm.clan_id = c.id
        WHERE cm.user_id = ?
    """, (user_id,))
    if cursor.fetchone():
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞–Ω
    cursor.execute("SELECT id FROM clans WHERE name = ?", (clan_name,))
    clan = cursor.fetchone()
    if not clan:
        bot.answer_callback_query(call.id, "–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    clan_id = clan[0]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–ª–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º 1
    cursor.execute("INSERT INTO clan_members (user_id, clan_id, level) VALUES (?, ?, 1)", (user_id, clan_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
    cursor.execute("SELECT creator_id FROM clans WHERE id = ?", (clan_id,))
    creator_id = cursor.fetchone()[0]
    bot.send_message(creator_id, f"@{call.from_user.username or f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}'} –≤—Å—Ç—É–ø–∏–ª –≤ –≤–∞—à –∫–ª–∞–Ω '{clan_name}'.")

    bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan_name}'.")

@bot.message_handler(commands=['klani'])
def clan_ranking(message):
    cursor.execute("""
        SELECT c.name, SUM(cm.level) AS total_levels
        FROM clans c
        LEFT JOIN clan_members cm ON c.id = cm.clan_id
        GROUP BY c.name
        ORDER BY total_levels DESC
    """)
    clans = cursor.fetchall()

    if clans:
        ranking = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:</b>\n\n"
        for i, (clan_name, total_levels) in enumerate(clans, start=1):
            ranking += f"{i}. {clan_name} ‚Äî –°—É–º–º–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {total_levels}\n"
        bot.send_message(message.chat.id, ranking, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤.")
        
def increase_member_level(user_id, clan_id):
    cursor.execute("""
        UPDATE clan_members
        SET level = level + 1
        WHERE user_id = ? AND clan_id = ?
    """, (user_id, clan_id))
    conn.commit()        
        
# –§—É–Ω–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –≥—Ä–∞–º–º–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Å—ã
@bot.message_handler(func=lambda message: message.text == "üí± –û–±–º–µ–Ω—è—Ç—å")
def exchange_grams(message):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Å—ã üåü (1000, 2000, 3000,):")
    bot.register_next_step_handler(msg, process_exchange_grams)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
def process_exchange_grams(message):
    user_id = message.from_user.id
    try:
        grams_amount = int(message.text)
        if grams_amount < 1000 or grams_amount % 1000 != 0:
            bot.send_message(user_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 1000 –∏ –Ω–µ –º–µ–Ω–µ–µ 1000.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä–∞–º–º–æ–≤
        cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        current_grams = result[0]

        if current_grams < grams_amount:
            bot.send_message(user_id, f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_grams} –≥—Ä–∞–º–º–æ–≤.")
            return

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Å—ã (1 —Å—Ç–∞—Ä—Å = 1000 –≥—Ä–∞–º–º)
        stars_to_add = grams_amount // 1000

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET gram = gram - ?, stars = stars + ? WHERE user_id = ?", (grams_amount, stars_to_add, user_id))
        conn.commit()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±–º–µ–Ω
        bot.send_message(user_id, f"–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –æ–±–º–µ–Ω—è–ª–∏ {grams_amount} –≥—Ä–∞–º–º–æ–≤ –Ω–∞ {stars_to_add} —Å—Ç–∞—Ä—Å–æ–≤.")
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤.")


# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS checks (
    check_id INTEGER PRIMARY KEY AUTOINCREMENT,
    creator_id INTEGER NOT NULL,
    gram_amount REAL NOT NULL,
    activation_limit INTEGER NOT NULL,
    activations INTEGER DEFAULT 0
)
''')
conn.commit()

from telebot import types

@bot.inline_handler(lambda query: query.query.startswith("—Ä–µ–¥–∫"))
def inline_check_rarity(query):
    try:
        args = query.query.split(maxsplit=1)

        if len(args) == 1:  
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ "—Ä–µ–¥–∫" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤  
            cursor.execute("SELECT skin, SUM(quantity) FROM user_skins GROUP BY skin")
            skins = cursor.fetchall()

            if not skins:
                text = "‚ùå –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤."
            else:
                text = "üìú **–†–µ–¥–∫–æ—Å—Ç—å —Å–∫–∏–Ω–æ–≤:**\n"
                for skin, total in skins:
                    text += f"üé≠ {skin} ‚Äî {total} —Ä–∞–∑(–∞)\n"

            results = [  
                types.InlineQueryResultArticle(  
                    id="all_skins",  
                    title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤",  
                    description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤",  
                    input_message_content=types.InputTextMessageContent(  
                        message_text=text,  
                        parse_mode="Markdown"  
                    ),
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            text="@Valyta_stars_bot —Ä–µ–¥–∫ üü°",
                            switch_inline_query_current_chat="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!"
                        )
                    )
                )  
            ]  

        else:  
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–∏–Ω–∞ (—ç–º–æ–¥–∑–∏)
            skin = args[1]  
            cursor.execute("SELECT SUM(quantity) FROM user_skins WHERE skin = ?", (skin,))  
            result = cursor.fetchone()  

            total = result[0] if result and result[0] else 0  
            text = f"üé≠ {skin} –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {total} —Ä–∞–∑(–∞) —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

            results = [  
                types.InlineQueryResultArticle(  
                    id=f"check_{skin}",  
                    title=f"{skin} ‚Äî {total}",  
                    description="–†–µ–¥–∫–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Å–∫–∏–Ω–∞",  
                    input_message_content=types.InputTextMessageContent(  
                        message_text=text  
                    ),
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            text="–£–∑–Ω–∞—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å",
                            switch_inline_query_current_chat="—Ä–µ–¥–∫ üü°"
                        )
                    )
                )  
            ]  

        bot.answer_inline_query(query.id, results, cache_time=5)

    except Exception as e:  
        print(f"–û—à–∏–±–∫–∞: {e}")  
        results = [  
            types.InlineQueryResultArticle(  
                id="error",  
                title="–û—à–∏–±–∫–∞",  
                description="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",  
                input_message_content=types.InputTextMessageContent(  
                    message_text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."  
                )  
            )  
        ]  
        bot.answer_inline_query(query.id, results)

from telebot import types

@bot.inline_handler(lambda query: query.query.startswith("—á–∫"))
def inline_create_check(query):
    try:
        args = query.query.split()
        if len(args) != 3:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —á–∫ <GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>",
                    input_message_content=types.InputTextMessageContent(
                        message_text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —á–∫ <GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        _, gram_per_activation, activation_limit = args
        gram_per_activation = float(gram_per_activation)
        activation_limit = int(activation_limit)

        if gram_per_activation <= 0 or activation_limit <= 0:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.",
                    input_message_content=types.InputTextMessageContent(
                        message_text="–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        total_gram = gram_per_activation * activation_limit
        commission = total_gram * 0.08  # 5% –∫–æ–º–∏—Å—Å–∏—è
        total_with_commission = total_gram + commission

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if not result or result[0] < total_with_commission:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"–£ –≤–∞—Å {result[0] if result else 0} GRAM, –∞ –Ω—É–∂–Ω–æ {total_with_commission:.2f} GRAM (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 8%: {commission:.2f} GRAM)."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ GRAM –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞
        cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (total_with_commission, user_id))
        cursor.execute('''
            INSERT INTO checks (creator_id, gram_amount, activation_limit, activations)
            VALUES (?, ?, ?, 0)
        ''', (user_id, gram_per_activation, activation_limit))
        conn.commit()

        check_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
        results = [
            types.InlineQueryResultArticle(
                id="check_created",
                title=f"–ß–µ–∫ –Ω–∞ {gram_per_activation} GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é",
                description=f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"–ß–µ–∫ —Å–æ–∑–¥–∞–Ω! ID —á–µ–∫–∞: {check_id}\nüí∞ –ö–∞–∂–¥–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è: {gram_per_activation} GRAM\nüîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}\nüìâ –û–±—â–∞—è —Å—É–º–º–∞: {total_gram:.2f} GRAM\nüßæ –ö–æ–º–∏—Å—Å–∏—è: {commission:.2f} GRAM"
                ),
                reply_markup=create_check_markup(check_id, gram_per_activation, activation_limit)
            )
        ]
        bot.answer_inline_query(query.id, results)

    except ValueError:
        results = [
            types.InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.",
                input_message_content=types.InputTextMessageContent(
                    message_text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —á–∫ <GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>."
                )
            )
        ]
        bot.answer_inline_query(query.id, results)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞
def create_check_markup(check_id, gram_amount, activation_limit):
    markup = types.InlineKeyboardMarkup()
    activate_button = types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å GRAM",
        callback_data=f"activate_check_{check_id}"
    )
    markup.add(activate_button)
    return markup
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã check_activations, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS check_activations (
    user_id INTEGER,
    check_id INTEGER,
    PRIMARY KEY (user_id, check_id)
)
''')
conn.commit()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("activate_check_"))
def activate_check(call):
    user_id = call.from_user.id
    check_id = int(call.data.split("_")[2])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á–µ–∫–∞
    cursor.execute("SELECT creator_id, gram_amount, activation_limit, activations FROM checks WHERE check_id = ?", (check_id,))
    check = cursor.fetchone()
    
    if not check:
        bot.answer_callback_query(call.id, "–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    creator_id, gram_amount, activation_limit, activations = check

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    if activations >= activation_limit:
        bot.answer_callback_query(call.id, "–ß–µ–∫ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —á–µ–∫
    cursor.execute("SELECT * FROM check_activations WHERE user_id = ? AND check_id = ?", (user_id, check_id))
    already_activated = cursor.fetchone()

    if already_activated:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GRAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (gram_amount, user_id))
    cursor.execute("UPDATE checks SET activations = activations + 1 WHERE check_id = ?", (check_id,))
    cursor.execute("INSERT INTO check_activations (user_id, check_id) VALUES (?, ?)", (user_id, check_id))
    conn.commit()

 
import random

@bot.message_handler(commands=['–±–æ–π'])
def battle(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –Ω–∞–≥—Ä–∞–¥–∞
    try:
        reward = int(message.text.split()[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if reward <= 0:
            raise ValueError  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    except (IndexError, ValueError):
        bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /–±–æ–π 100")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –Ω–∞ –±–æ–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    attacker_id = message.from_user.id
    attacker_username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    defender_id = message.reply_to_message.from_user.id
    defender_username = message.reply_to_message.from_user.username or "–ë–µ–∑_–∏–º–µ–Ω–∏"

    if attacker_id == defender_id:
        bot.reply_to(message, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (attacker_id,))
    attacker_balance = cursor.fetchone()
    if not attacker_balance or attacker_balance[0] < reward:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (defender_id,))
    defender_balance = cursor.fetchone()
    if not defender_balance or defender_balance[0] < reward:
        bot.reply_to(message, f"–£ {defender_username} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –±–æ—è!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –±–æ—è
    markup = types.InlineKeyboardMarkup()
    accept_button = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_battle_{attacker_id}_{defender_id}_{reward}")
    markup.add(accept_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –±–æ–π
    bot.send_message(
        message.chat.id,
        f"‚öîÔ∏è @{attacker_username} –≤—ã–∑–≤–∞–ª @{defender_username} –Ω–∞ –±–æ–π —Å –Ω–∞–≥—Ä–∞–¥–æ–π {reward} GRAM!\n"
        f"{defender_username}, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ–π.",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_battle_"))
def accept_battle(call):
    data = call.data.split("_")
    attacker_id = int(data[2])
    defender_id = int(data[3])
    reward = int(data[4])

    if call.from_user.id != defender_id:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –≤—ã–∑–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
    attacker_chance = random.randint(1, 100)
    defender_chance = random.randint(1, 100)

    if attacker_chance > defender_chance:
        winner_id = attacker_id
        loser_id = defender_id
        winner_username = bot.get_chat(winner_id).username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        loser_username = bot.get_chat(loser_id).username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    else:
        winner_id = defender_id
        loser_id = attacker_id
        winner_username = bot.get_chat(winner_id).username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        loser_username = bot.get_chat(loser_id).username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (reward, winner_id))
    cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (reward, loser_id))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    bot.edit_message_text(
        f"‚öîÔ∏è –ë–æ–π –º–µ–∂–¥—É @{bot.get_chat(attacker_id).username or '–ë–µ–∑_–∏–º–µ–Ω–∏'} –∏ @{bot.get_chat(defender_id).username or '–ë–µ–∑_–∏–º–µ–Ω–∏'} –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} –≥—Ä–∞–º–º\n"
        f"üòî –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @{loser_username}",
        call.message.chat.id,
        call.message.message_id
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã GRAM –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['–∏–∑–º–µ–Ω–∏—Ç—å'])
def change_gram(message):
    if message.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.reply_to_message:
        bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ GRAM.")
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–∏–∑–º–µ–Ω–∏—Ç—å <+/-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>. –ü—Ä–∏–º–µ—Ä: /–∏–∑–º–µ–Ω–∏—Ç—å +100")
            return

        change = float(parts[1].replace(",", "."))
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.username or "–ë–µ–∑_–∏–º–µ–Ω–∏"

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (change, user_id))
        conn.commit()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        bot.reply_to(
            message,
            f"–ë–∞–ª–∞–Ω—Å GRAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'+' if change > 0 else ''}{change:.2f}.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {cursor.execute('SELECT gram FROM users WHERE user_id = ?', (user_id,)).fetchone()[0]:.2f} GRAM."
        )
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /–∏–∑–º–µ–Ω–∏—Ç—å +100")

@bot.message_handler(commands=['–¥–¥'])
def change_gram_by_username(message):
    if message.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∏ —é–∑–µ—Ä–Ω–µ–π–º
        parts = message.text.split()
        if len(parts) != 3 or not parts[1].replace("-", "").replace("+", "").replace(",", ".").isdigit():
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–¥–¥ <+/-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> @username\n–ü—Ä–∏–º–µ—Ä: /–¥–¥ -300 @nikugj")
            return

        change = float(parts[1].replace(",", "."))
        username = parts[2].lstrip("@")  # –£–±–∏—Ä–∞–µ–º '@' –ø–µ—Ä–µ–¥ –Ω–∏–∫–Ω–µ–π–º–æ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute("SELECT user_id FROM users WHERE username = ?", (username,))
        user_data = cursor.fetchone()

        if not user_data:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        user_id = user_data[0]

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (change, user_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        bot.reply_to(
            message,
            f"–ë–∞–ª–∞–Ω—Å GRAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'+' if change > 0 else ''}{change:.2f}.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} GRAM."
        )
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /–¥–¥ -300 @nikugj")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è VIP 2 —É—Ä–æ–≤–Ω—è
try:
    cursor.execute("ALTER TABLE users ADD COLUMN vip_level INTEGER DEFAULT 0")
    conn.commit()
except sqlite3.OperationalError:
    # –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    pass

shop_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞

@bot.message_handler(func=lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT vip_level FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    vip_level = result[0] if result else 0  # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π

    # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞: VIP –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
    if vip_level >= 2:
        send_shop(message, user_id, vip=True)  # –ú–∞–≥–∞–∑–∏–Ω –¥–ª—è VIP
    else:
        send_shop(message, user_id, vip=False)  # –û–±—ã—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω

def send_shop(message, user_id, vip=False):
    if user_id in shop_messages:
        for msg_id in shop_messages[user_id]:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        shop_messages[user_id].clear()

    keyboard = types.InlineKeyboardMarkup(row_width=2)

    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Ü–µ–Ω—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ VIP)
    skins = [
        ("‚è≥", 1500), ("üåü", 9000),  
        ("ü™ö", 9000), ("‚õèÔ∏è", 9000),  
        ("ü™£", 8000), ("ü™ì", 11000),  
        ("ü¶Ö", 7600), ("‚òÑÔ∏è", 5500),  
        ("ü™°", 6000), ("üï≥Ô∏è", 2500),  
        ("üí£", 2400), ("üåï", 1600),  
        ("ü™µ", 1000), ("üéÅ", 610),  
        ("ü™®", 550), ("üí¶", 250)  
    ]

    # –ï—Å–ª–∏ VIP, –¥–∞–µ–º —Å–∫–∏–¥–∫—É 15%
    buttons = []
    for skin, price in skins:
        discount_price = int(price * 0.93) if vip else price
        buttons.append(
            types.InlineKeyboardButton(
                f"{skin} {discount_price} GRAM", 
                callback_data=f"buy_skin_{skin}_{discount_price}_{vip}"
            )
        )

    keyboard.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ —ç—Ç–æ VIP-–º–∞–≥–∞–∑–∏–Ω
    title = "üèÜ –ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –í–ò–ü (—Å–∫–∏–¥–∫–∞ 10%)" if vip else "–ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    msg = bot.send_message(message.chat.id, title, reply_markup=keyboard)

    shop_messages.setdefault(user_id, []).append(msg.message_id)        
        
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_skin_"))
def buy_skin(call):
    user_id = call.from_user.id
    _, _, skin, price, vip = call.data.split("_")
    price = int(price)
    vip = vip == "True"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞
    cursor.execute("SELECT vip_level, gram FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if not result:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_vip_level, balance = result

    # –ï—Å–ª–∏ —ç—Ç–æ VIP-–º–∞–≥–∞–∑–∏–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ VIP ‚Äî –æ—Ç–∫–∞–∑
    if vip and user_vip_level < 2:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –í–ò–ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if balance < price:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ GRAM
    cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (price, user_id))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    cursor.execute('''
        INSERT INTO user_skins (user_id, skin, quantity)
        VALUES (?, ?, 1)
        ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
    ''', (user_id, skin))
    
    conn.commit()

    bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Å–∫–∏–Ω {skin}!")
    bot.send_message(call.message.chat.id, f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–∫–∏–Ω {skin} –≤ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ last_collect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
cursor.execute('''
CREATE TABLE IF NOT EXISTS user_pets (
    user_id INTEGER PRIMARY KEY,
    cats INTEGER DEFAULT 0,
    last_collect DATE DEFAULT NULL
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS skin_checks (
    check_id INTEGER PRIMARY KEY AUTOINCREMENT,
    creator_id INTEGER,
    skin TEXT,
    quantity INTEGER,
    activations INTEGER DEFAULT 0,
    activation_limit INTEGER
)
''')
conn.commit()

@bot.inline_handler(lambda query: query.query.startswith("—á—Å–∫"))
def inline_create_skin_check(query):
    try:
        args = query.query.split()
        if len(args) != 3:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —á—Å–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>",
                    input_message_content=types.InputTextMessageContent(
                        message_text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —á—Å–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        _, skin, activation_limit = args
        activation_limit = int(activation_limit)

        if activation_limit <= 0:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.",
                    input_message_content=types.InputTextMessageContent(
                        message_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        user_id = query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–æ–π —Å–∫–∏–Ω
        cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, skin))
        result = cursor.fetchone()

        if not result or result[0] < activation_limit:
            results = [
                types.InlineQueryResultArticle(
                    id="error",
                    title="–û—à–∏–±–∫–∞",
                    description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"–£ –≤–∞—Å {result[0] if result else 0} —Å–∫–∏–Ω–æ–≤ {skin}, –∞ –Ω—É–∂–Ω–æ {activation_limit}."
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–∫–∏–Ω—ã –∏ —Å–æ–∑–¥–∞–µ–º —á–µ–∫
        cursor.execute("UPDATE user_skins SET quantity = quantity - ? WHERE user_id = ? AND skin = ?", 
                       (activation_limit, user_id, skin))
        cursor.execute('''
            INSERT INTO skin_checks (creator_id, skin, activation_limit, activations)
            VALUES (?, ?, ?, 0)
        ''', (user_id, skin, activation_limit))
        conn.commit()

        check_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        results = [
            types.InlineQueryResultArticle(
                id="skin_check_created",
                title=f"–ß–µ–∫ –Ω–∞ {skin}",
                description=f"–î–æ—Å—Ç—É–ø–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"üéÅ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω! ID: {check_id}\nüîπ –°–∫–∏–Ω: {skin}\nüîÑ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activation_limit}"
                ),
                reply_markup=create_skin_check_markup(check_id)
            )
        ]
        bot.answer_inline_query(query.id, results)

    except ValueError:
        results = [
            types.InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                description="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.",
                input_message_content=types.InputTextMessageContent(
                    message_text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —á—Å–∫ <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π>."
                )
            )
        ]
        bot.answer_inline_query(query.id, results)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —á–µ–∫–∞ –Ω–∞ —Å–∫–∏–Ω
def create_skin_check_markup(check_id):
    markup = types.InlineKeyboardMarkup()
    activate_button = types.InlineKeyboardButton(
        text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–Ω",
        callback_data=f"activate_skin_check_{check_id}"
    )
    markup.add(activate_button)
    return markup


# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ–∫–æ–≤ –Ω–∞ —Å–∫–∏–Ω—ã
cursor.execute('''
CREATE TABLE IF NOT EXISTS skin_check_activations (
    user_id INTEGER,
    check_id INTEGER,
    PRIMARY KEY (user_id, check_id)
)
''')
conn.commit()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞ –Ω–∞ —Å–∫–∏–Ω
@bot.callback_query_handler(func=lambda call: call.data.startswith("activate_skin_check_"))
def activate_skin_check(call):
    user_id = call.from_user.id
    check_id = int(call.data.split("_")[3])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞
    cursor.execute("SELECT creator_id, skin, activation_limit, activations FROM skin_checks WHERE check_id = ?", (check_id,))
    check = cursor.fetchone()

    if not check:
        bot.answer_callback_query(call.id, "–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    creator_id, skin, activation_limit, activations = check

    if activations >= activation_limit:
        bot.answer_callback_query(call.id, "–ß–µ–∫ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —á–µ–∫
    cursor.execute("SELECT * FROM skin_check_activations WHERE user_id = ? AND check_id = ?", (user_id, check_id))
    already_activated = cursor.fetchone()

    if already_activated:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute('''
        INSERT INTO user_skins (user_id, skin, quantity)
        VALUES (?, ?, 1)
        ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
    ''', (user_id, skin))
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ–∫–∞
    cursor.execute("UPDATE skin_checks SET activations = activations + 1 WHERE check_id = ?", (check_id,))
    cursor.execute("INSERT INTO skin_check_activations (user_id, check_id) VALUES (?, ?)", (user_id, check_id))
    conn.commit()

    bot.answer_callback_query(call.id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–Ω {skin}!")
    bot.send_message(call.message.chat.id, f"‚úÖ {call.from_user.first_name} –ø–æ–ª—É—á–∏–ª —Å–∫–∏–Ω {skin}!")

@bot.message_handler(commands=["–ø—Ä–æ–¥–∞—Ç—å"])
def sell_skin(message):
    try:
        args = message.text.split(" ")
        if len(args) != 4:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–ø—Ä–æ–¥–∞—Ç—å <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–°–∫–∏–Ω> <–¶–µ–Ω–∞>")
            return

        quantity = int(args[1])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∏–Ω–æ–≤
        skin = args[2]
        price = int(args[3])
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, skin))
        result = cursor.fetchone()
        if not result or result[0] < quantity:
            bot.reply_to(message, f"–£ –≤–∞—Å –Ω–µ—Ç {quantity} —Å–∫–∏–Ω–æ–≤ {skin} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
        seller_name = cursor.fetchone()
        seller_name = seller_name[0] if seller_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(
            f"–ö—É–ø–∏—Ç—å {skin} ({quantity} —à—Ç.) –∑–∞ {price} GRAM", 
            callback_data=f"buy_{user_id}_{skin}_{price}_{quantity}_{message.message_id}"
        )
        keyboard.add(button)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        bot.send_message(
            message.chat.id, 
            f"#–¢–æ–≤–∞—Ä üè™ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç üéâ{seller_name}üéâ\n"
            f"–¶–µ–Ω–∞ –∑–∞ {quantity} —Å–∫–∏–Ω–æ–≤: {price} GRAMM\n"
            f"–°–æ–≤—Å–µ–º –Ω–æ–≤—ã–µ —Å–∫–∏–Ω—ã\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚§µÔ∏è",
            reply_markup=keyboard
        )
    except ValueError:
        bot.reply_to(message, "–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def buy_skin(call):
    try:
        # –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        _, seller_id, skin, price, quantity, message_id = call.data.split("_")
        price = int(price)
        quantity = int(quantity)
        seller_id = int(seller_id)
        buyer_id = call.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        cursor.execute("SELECT gram FROM users WHERE user_id = ?", (buyer_id,))
        buyer_balance = cursor.fetchone()
        if not buyer_balance or buyer_balance[0] < price:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–Ω–æ–≤ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
        cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (seller_id, skin))
        seller_skin = cursor.fetchone()
        if not seller_skin or seller_skin[0] < quantity:
            bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        cursor.execute("SELECT username FROM users WHERE user_id = ?", (seller_id,))
        seller_name = cursor.fetchone()
        seller_name = seller_name[0] if seller_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        cursor.execute("SELECT username FROM users WHERE user_id = ?", (buyer_id,))
        buyer_name = cursor.fetchone()
        buyer_name = buyer_name[0] if buyer_name else "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–∫–∏–Ω–æ–≤
        cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (price, buyer_id))
        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (price, seller_id))
        cursor.execute("UPDATE user_skins SET quantity = quantity - ? WHERE user_id = ? AND skin = ?", (quantity, seller_id, skin))
        cursor.execute('''
            INSERT INTO user_skins (user_id, skin, quantity)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + ?
        ''', (buyer_id, skin, quantity, quantity))
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        keyboard = types.InlineKeyboardMarkup()
        sold_button = types.InlineKeyboardButton(
            f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ @{buyer_name} –∑–∞ {price} GRAM",
            callback_data="sold"
        )
        keyboard.add(sold_button)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=call.message.text,  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            reply_markup=keyboard
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        bot.answer_callback_query(call.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {quantity} —Å–∫–∏–Ω–æ–≤ {skin}!")

    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tt
@bot.message_handler(commands=['tt'])
def tt(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è VIP
    cursor.execute("SELECT vip_level FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if user_data and user_data[0] == 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç VIP 2 —É—Ä–æ–≤–Ω—è
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT username, gram FROM users ORDER BY gram DESC")
        users = cursor.fetchall()

        if users:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            send_top_gram(message.chat.id, users, page=1, message_id=None)
        else:
            bot.reply_to(message, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å VIP 2 —É—Ä–æ–≤–Ω—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
def send_top_gram(chat_id, users, page, message_id):
    per_page = 20  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(users) - 1) // per_page + 1  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1 or page > total_pages:
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * per_page
    end = start + per_page
    users_page = users[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    result = f"<b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ GRAM (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    for i, user in enumerate(users_page, start=start + 1):
        username, gram = user
        result += f"<b>{i}.</b> @{username}: üíé <b>{gram:.2f}</b> GRAM\n"
    total_gram = sum(user[1] for user in users)
    result += f"\n<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GRAM:</b> üíé <b>{total_gram:.2f}</b>"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup()
    if page > 1:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tt_page:{page-1}"))
    if page < total_pages:
        keyboard.add(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"tt_page:{page+1}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    if message_id:
        bot.edit_message_text(result, chat_id=chat_id, message_id=message_id, reply_markup=keyboard, parse_mode="HTML")
    else:
        sent_message = bot.send_message(chat_id, result, reply_markup=keyboard, parse_mode="HTML")
        return sent_message.message_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("tt_page"))
def handle_tt_page(call):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è VIP
    cursor.execute("SELECT vip_level FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if user_data and user_data[0] == 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç VIP 2 —É—Ä–æ–≤–Ω—è
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = int(call.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT username, gram FROM users ORDER BY gram DESC")
        users = cursor.fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        send_top_gram(call.message.chat.id, users, page, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å VIP 2 —É—Ä–æ–≤–Ω—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
@bot.message_handler(commands=['–æ–≥—Ä–∞–±–∏—Ç—å'])
def rob(message):
    user_id = message.from_user.id  # ID –≥—Ä–∞–±–∏—Ç–µ–ª—è
    reply_to_message = message.reply_to_message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –æ—Ç–≤–µ—Ç

    if not reply_to_message:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ /–æ–≥—Ä–∞–±–∏—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã!")
        return

    victim_id = reply_to_message.from_user.id  # ID –∂–µ—Ä—Ç–≤—ã
    victim_username = reply_to_message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≥—Ä–∞–±–∏—Ç–µ–ª—è —Å–∫–∏–Ω üï≥Ô∏è
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, "üï≥Ô∏è"))
    skin = cursor.fetchone()

    if not skin or skin[0] < 1:
        bot.send_message(message.chat.id, "–î–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–µ–Ω —Å–∫–∏–Ω üï≥Ô∏è. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –≥—Ä–∞–±–∏—Ç—å —É –∂–µ—Ä—Ç–≤—ã
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (victim_id,))
    victim_data = cursor.fetchone()

    if not victim_data or victim_data[0] < 500:
        bot.send_message(message.chat.id, f"{victim_username} –Ω–µ—á–µ–≥–æ –≥—Ä–∞–±–∏—Ç—å! –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è ‚Äî 500 GRAM.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è (—à–∞–Ω—Å 70%)
    success = random.choices([True, False], weights=[70, 30], k=1)[0]

    if success:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –æ—Ç 500 –¥–æ 1000 GRAM
        stolen_amount = random.randint(150,500 )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É –∫—Ä–∞–∂–∏ —Ä–∞–∑–º–µ—Ä–æ–º –±–∞–ª–∞–Ω—Å–∞ –∂–µ—Ä—Ç–≤—ã
        stolen_amount = min(stolen_amount, victim_data[0])

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∂–µ—Ä—Ç–≤—ã –∏ –≥—Ä–∞–±–∏—Ç–µ–ª—è
        cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (stolen_amount, victim_id))
        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (stolen_amount, user_id))

        # –û—Ç–Ω–∏–º–∞–µ–º –æ–¥–∏–Ω —Å–∫–∏–Ω üï≥Ô∏è —É –≥—Ä–∞–±–∏—Ç–µ–ª—è
        cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (user_id, "üï≥Ô∏è"))
        conn.commit()

        bot.send_message(
            message.chat.id,
            f"üè¥‚Äç‚ò†Ô∏è {message.from_user.username} —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª {victim_username} –∏ —É–∫—Ä–∞–ª {stolen_amount} GRAM! "
            f"–°–∫–∏–Ω üï≥Ô∏è –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."
        )
    else:
        # –ï—Å–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–Ω–∏–º–∞–µ–º –æ–¥–∏–Ω —Å–∫–∏–Ω
        cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (user_id, "üï≥Ô∏è"))
        conn.commit()

        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è {message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–≥—Ä–∞–±–∏—Ç—å {victim_username}, –Ω–æ –Ω–µ—É–¥–∞—á–Ω–æ! "
            f"–°–∫–∏–Ω üï≥Ô∏è –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."
        )

import threading
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

@bot.message_handler(commands=['–∑–≤—ë–∑–¥—ã'])
def use_star(message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–≤–µ–∑–¥–∞
    cursor.execute("SELECT * FROM user_skins WHERE user_id = ? AND skin = 'üåü'", (user_id,))
    result = cursor.fetchone()
    if not result or result[2] < 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–≤–µ–∑–¥–∞
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥—ã üåü. –ö—É–ø–∏—Ç–µ –µ—ë –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –Ω–∞ 1
    cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = 'üåü'", (user_id,))
    conn.commit()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å 0.10 Stars", callback_data=f"add_stars_{user_id}")
    keyboard.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    msg = bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 0.10 Stars!", reply_markup=keyboard)

    # –¢–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç
    threading.Timer(60, delete_message, args=(message.chat.id, msg.message_id)).start()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_stars_"))
def add_stars(call):
    user_id = int(call.data.split("_")[2])
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã–∑–≤–∞–≤—à–µ–º—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º 0.5 Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    cursor.execute("UPDATE users SET stars = stars + 0.10 WHERE user_id = ?", (user_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.10 Stars!")

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
def delete_message(chat_id, message_id):
    try:
        bot.edit_message_text("–í—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!", chat_id=chat_id, message_id=message_id)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–∫–∏–Ω–æ–≤
@bot.message_handler(func=lambda message: "–•—Ö" in message.text)
def transfer_skin(message):
    user_id = message.from_user.id
    text = message.text

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–•—Ö X üï≥Ô∏è" (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–∫–∏–Ω)
    match = re.match(r"–•—Ö (\d+) ([\u2600-\u27BF\U0001F000-\U0001FAFF])", text)
    if match:
        skin_count = int(match.group(1))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∏–Ω–æ–≤
        skin = match.group(2)  # –ò–∫–æ–Ω–∫–∞ —Å–∫–∏–Ω–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, skin))
        result = cursor.fetchone()

        if result and result[0] >= skin_count:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.reply_to_message:
                # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                recipient_id = message.reply_to_message.from_user.id

                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–∫–∏–Ω—ã —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                cursor.execute("UPDATE user_skins SET quantity = quantity - ? WHERE user_id = ? AND skin = ?", (skin_count, user_id, skin))

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                cursor.execute('''
                    INSERT INTO user_skins (user_id, skin, quantity)
                    VALUES (?, ?, ?)
                    ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + ?
                ''', (recipient_id, skin, skin_count, skin_count))
                conn.commit()

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
                bot.send_message(message.chat.id, f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ üôåüèª {skin_count} {skin} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.reply_to_message.from_user.username}.")
                bot.send_message(recipient_id, f"–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω–æ üôåüèª {skin_count} {skin} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}.")
            else:
                bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∫–∏–Ω.")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –•—Ö <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Å–∫–∏–Ω>.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /vip
@bot.message_handler(commands=['vip_2'])
def vip_2_command(message):
    if message.from_user.id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id = message.reply_to_message.from_user.id
            cursor.execute("UPDATE users SET vip_level = 2 WHERE user_id = ?", (user_id,))
            conn.commit()
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å VIP 2 —É—Ä–æ–≤–Ω—è üèÜ2!")
            bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å VIP 2 —É—Ä–æ–≤–Ω—è üèÜ2.")
        else:
            bot.reply_to(message, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

@bot.message_handler(commands=['vip_z'])
def vip_z_command(message):
    if message.from_user.id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id = message.reply_to_message.from_user.id
            cursor.execute("UPDATE users SET vip_level = 0 WHERE user_id = ?", (user_id,))
            conn.commit()
            bot.reply_to(message, f"–°—Ç–∞—Ç—É—Å VIP —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.username} –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.")
            bot.send_message(user_id, "–í–∞—à —Å—Ç–∞—Ç—É—Å VIP –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –û–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å üèÜ VIP ")
        else:
            bot.reply_to(message, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

@bot.message_handler(commands=["–∑–±—Ä–æ—Å"])
def reset_photos(message):
    if message.from_user.id == ADMIN_ID:  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
        cursor.execute("UPDATE users SET photo_id = NULL")
        conn.commit()
        bot.reply_to(message, "–í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

import time
import threading

def remove_zero_skins():
    while True:
        # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é)
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —á–∞—Å

        cursor.execute("SELECT user_id, skin FROM user_skins WHERE quantity = 0")
        zero_skins = cursor.fetchall()

        for user_id, skin in zero_skins:
            cursor.execute("DELETE FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, skin))
        
        conn.commit()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
threading.Thread(target=remove_zero_skins, daemon=True).start()

@bot.message_handler(commands=['pp'])
def transfer_skins(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /pp üåå
    if len(message.text.split()) < 2:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /pp üåå.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    skin_name = message.text.split(maxsplit=1)[1]

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π —Å–∫–∏–Ω –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user_id = message.reply_to_message.from_user.id
    else:
        bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π —Å–∫–∏–Ω —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–æ–π —Å–∫–∏–Ω
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (target_user_id, skin_name))
    skin_data = cursor.fetchone()

    if not skin_data:
        bot.reply_to(message, f"–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–∫–∏–Ω–∞ '{skin_name}'.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–∫–∏–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("DELETE FROM user_skins WHERE user_id = ? AND skin = ?", (target_user_id, skin_name))
    conn.commit()

    bot.reply_to(message, f"–°–∫–∏–Ω '{skin_name}' –±—ã–ª —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.message_handler(commands=['delete'])
def delete_skin(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete
    if len(message.text.split()) < 2:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /delete.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    skin_name = message.text.split(maxsplit=1)[1]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ —Å–∫–∏–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("DELETE FROM user_skins WHERE skin = ?", (skin_name,))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–∫–∏–Ω —É–¥–∞–ª–µ–Ω
    if cursor.rowcount > 0:
        bot.reply_to(message, f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–Ω–µ '{skin_name}' –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        bot.reply_to(message, f"–°–∫–∏–Ω '{skin_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(commands=['chch'])
def check_admin_skins(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    cursor.execute("SELECT skin, quantity FROM user_skins WHERE user_id = ?", (user_id,))
    skins = cursor.fetchall()

    if not skins:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤.")
        return

    skins_text = "\n".join([f"{skin[0]} x{skin[1]}" for skin in skins])

    bot.reply_to(message, f"–í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_text}")

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π
last_profile_messages = {}

@bot.message_handler(func=lambda message: message.text == "–ß—á")
def profile(message):
    user_id = message.from_user.id
    target_id = user_id  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

    if user_id == ADMIN_ID and message.reply_to_message:  
        target_id = message.reply_to_message.from_user.id  

    if user_id in last_profile_messages:  
        try:  
            bot.delete_message(message.chat.id, last_profile_messages[user_id])  
        except Exception:  
            pass  

    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
    cursor.execute("SELECT stars, gram, zerocoin, vip_level, photo_id, selected_skin, hidden_skins FROM users WHERE user_id = ?", (target_id,))
    user_data = cursor.fetchone()  

    # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–∏–Ω–æ–≤  
    cursor.execute("SELECT skin, quantity FROM user_skins WHERE user_id = ?", (target_id,))
    skins = cursor.fetchall()  

    if user_data:  
        stars, gram, zerocoin, vip_level, photo_id, selected_skin, hidden_skins = user_data  
        hidden_skins = set(hidden_skins.split(",")) if hidden_skins else set()  

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–∏–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ      
        skins = [skin for skin in skins if skin[0] not in hidden_skins]      

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–∫–∏–Ω–∞–º–∏      
        if skins:      
            skin_lines = []      
            for i in range(0, len(skins), 2):      
                line = " | ".join([f"{skins[j][0]} x{skins[j][1]}" for j in range(i, min(i + 2, len(skins)))])      
                skin_lines.append(line)      
            skins_text = "\n".join(skin_lines)      
        else:      
            skins_text = "–ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö —Å–∫–∏–Ω–æ–≤"      

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏      
        markup = InlineKeyboardMarkup()  
        row1 = [  
            InlineKeyboardButton("–ù–∞–¥–µ—Ç—å —Å–∫–∏–Ω", callback_data=f"select_skin_{target_id}"),  
            InlineKeyboardButton("–Ø –∫—Ä—É—Ç–æ–π!", callback_data=f"cool_{target_id}") if vip_level == 2 else None  
        ]  
        row2 = [  
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"upload_photo_{target_id}"),  
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="toggle_ss")  
        ]  
        markup.row(*[btn for btn in row1 if btn])  
        markup.row(*row2)  

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è      
        username = f"@{message.reply_to_message.from_user.username}" if user_id == ADMIN_ID and message.reply_to_message else f"@{message.from_user.username}"      
        if selected_skin:      
            username += f" [{selected_skin}]"      

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–∏–Ω–∞ –∏ VIP-—É—Ä–æ–≤–Ω—è      
        if selected_skin == "üåå" and vip_level == 2:      
            profile_text = (      
                f"üåå VIP –ì–∞–ª–∞–∫—Ç–∏–∫–∞ üåå\n"      
                f"üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"      
                f"üîµ Stars: üåü {stars:.2f}\n"      
                f"üîµ GRAM: üíµ {gram:.2f}\n"      
                f"üîµ –ó–µ—Ä–æ–∫–æ–∏–Ω—ã: üÖæÔ∏è {zerocoin:.2f}\n"      
                f"üîµ –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_text}\n"      
                f"üå† –°—Ç–∞—Ç—É—Å: üèÜ 2 VIP üåå"      
            )      
        elif selected_skin == "‚ùÑÔ∏è" and vip_level == 2:      
            profile_text = (      
                f"‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è\n"      
                f"üå®Ô∏è VIP WINTER üå®Ô∏è\n"      
                f"‚ùÑÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"      
                f"‚ùÑÔ∏è Stars: ‚ùÑÔ∏è {stars:.2f}\n"      
                f"‚ùÑÔ∏è GRAM: üßä {gram:.2f}\n"      
                f"‚ùÑÔ∏è –ó–µ—Ä–æ–∫–æ–∏–Ω—ã: üÖæÔ∏è {zerocoin:.2f}\n"      
                f"‚ùÑÔ∏è –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_text}\n"      
                f"‚ùÑÔ∏è –°—Ç–∞—Ç—É—Å: üèÜ 2 VIP ICE KING ‚ùÑÔ∏è"      
            )      
        elif selected_skin == "üå∑" and vip_level == 2:      
            profile_text = (      
                f"üå∏ VIP 8 –ú–∞—Ä—Ç–∞ üå∏\n"      
                f"üíñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"      
                f"üíñ Stars: ‚ú® {stars:.2f}\n"      
                f"üíñ GRAM: üíµ {gram:.2f}\n"      
                f"üíñ –ó–µ—Ä–æ–∫–æ–∏–Ω—ã: üÖæÔ∏è {zerocoin:.2f}\n"      
                f"üíû –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_text}\n"      
                f"üíê –°—Ç–∞—Ç—É—Å: üëë 2 VIP üíï"      
            )
        else:      
            profile_text = (      
                f"üèÜ VIP üèÜ\n"      
                f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"      
                f"üëë Stars: üåü {stars:.2f}\n"      
                f"üëë GRAM: üíµ {gram:.2f}\n"      
                f"üëë –ó–µ—Ä–æ–∫–æ–∏–Ω—ã: üÖæÔ∏è {zerocoin:.2f}\n"      
                f"üëë –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_text}\n"      
                f"–í–∞—à —Å—Ç–∞—Ç—É—Å: üèÜ 2 VIP " if vip_level == 2 else      
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"      
                f"–í–∞—à–∏ Stars: üåü {stars:.2f}\n"      
                f"–í–∞—à–∏ GRAM: üíµ {gram:.2f}\n"      
                f"–í–∞—à–∏ –ó–µ—Ä–æ–∫–æ–∏–Ω—ã: üÖæÔ∏è {zerocoin:.2f}\n"      
                f"–í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{skins_text}"      
            )      

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å      
        if photo_id:      
            msg = bot.send_photo(      
                message.chat.id,       
                photo_id,       
                caption=profile_text,      
                reply_markup=markup      
            )      
        else:      
            msg = bot.reply_to(message, profile_text, reply_markup=markup)      

        last_profile_messages[user_id] = msg.message_id  

    else:  
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_skin_"))
def select_skin(call):
    user_id = int(call.data.split("_")[2])
    if call.from_user.id != user_id:
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∫–∏–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    cursor.execute("SELECT skin FROM user_skins WHERE user_id = ?", (user_id,))
    skins = cursor.fetchall()

    if not skins:
        return bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤!")

    markup = InlineKeyboardMarkup()
    for skin in skins:
        markup.add(InlineKeyboardButton(skin[0], callback_data=f"wear_skin_{user_id}_{skin[0]}"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–Ω:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("wear_skin_"))
def wear_skin(call):
    data = call.data.split("_")
    user_id = int(data[2])
    skin_name = data[3]

    if call.from_user.id != user_id:
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∫–∏–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    cursor.execute("UPDATE users SET selected_skin = ? WHERE user_id = ?", (skin_name, user_id))
    conn.commit()

    bot.answer_callback_query(call.id, f"–°–∫–∏–Ω {skin_name} –Ω–∞–¥–µ—Ç!")
    bot.send_message(user_id, f"–í—ã –Ω–∞–¥–µ–ª–∏ —Å–∫–∏–Ω: {skin_name}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("upload_photo_"))
def request_photo(call):
    user_id = int(call.data.split("_")[2])
    if call.from_user.id == user_id:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        bot.register_next_step_handler_by_chat_id(user_id, save_photo)
    else:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–µ —Ñ–æ—Ç–æ!")

def save_photo(message):
    user_id = message.from_user.id
    if message.photo:
        photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET photo_id = ? WHERE user_id = ?", (photo_id, user_id))
        conn.commit()
        
        bot.reply_to(message, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    else:
        bot.reply_to(message, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

@bot.callback_query_handler(func=lambda call: call.data == "toggle_ss")
def toggle_ss(call):
    user_id = call.from_user.id

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç inline-–∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —á–µ–∫", switch_inline_query="—á–∫ 100 1"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(
        user_id,
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á–µ–∫:",
        reply_markup=keyboard
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–≤–∞—é –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏...")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")

from telebot.types import ReplyKeyboardRemove

# –ö–æ–º–∞–Ω–¥–∞ /ss ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–∫–∏–Ω–æ–≤
@bot.message_handler(commands=["ss"])
def toggle_skin_visibility(message):
    user_id = message.from_user.id
    cursor.execute("SELECT skin FROM user_skins WHERE user_id = ?", (user_id,))
    skins = cursor.fetchall()

    if not skins:
        return bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤!")

    cursor.execute("SELECT hidden_skins FROM users WHERE user_id = ?", (user_id,))
    hidden_skins = cursor.fetchone()
    hidden_skins = set(hidden_skins[0].split(",")) if hidden_skins and hidden_skins[0] else set()

    markup = InlineKeyboardMarkup()
    row = []
    for skin in skins:
        skin_name = skin[0]
        is_hidden = "‚úÖ" if skin_name in hidden_skins else ""
        row.append(InlineKeyboardButton(f"{skin_name} {is_hidden}", callback_data=f"toggle_skin_{user_id}_{skin_name}"))

        if len(row) == 4:
            markup.row(*row)
            row = []
    if row:
        markup.row(*row)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–∫–∏–Ω—ã —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ —Å–∫–∏–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("toggle_skin_"))
def toggle_skin(call):
    data = call.data.split("_")
    user_id = int(data[2])
    skin_name = data[3]

    if call.from_user.id != user_id:
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —á—É–∂–∏–º–∏ —Å–∫–∏–Ω–∞–º–∏!")

    cursor.execute("SELECT hidden_skins FROM users WHERE user_id = ?", (user_id,))
    hidden_skins = cursor.fetchone()
    hidden_skins = set(hidden_skins[0].split(",")) if hidden_skins and hidden_skins[0] else set()

    if skin_name in hidden_skins:
        hidden_skins.remove(skin_name)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö
    else:
        hidden_skins.add(skin_name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∫—Ä—ã—Ç—ã–µ

    cursor.execute("UPDATE users SET hidden_skins = ? WHERE user_id = ?", (",".join(hidden_skins), user_id))
    conn.commit()

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    toggle_skin_visibility(call.message)

@bot.message_handler(commands=["–±–∞—Å–∏—Ä—Ä"])
def give_zerocoin(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å 1 üÖæÔ∏è!")
        return

    target_id = message.reply_to_message.from_user.id

    # –ù–∞—á–∏—Å–ª—è–µ–º 1 –∑–µ—Ä–æ–∫–æ–∏–Ω
    cursor.execute("UPDATE users SET zerocoin = zerocoin + 1 WHERE user_id = ?", (target_id,))
    conn.commit()

    bot.reply_to(message.reply_to_message, "üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 üÖæÔ∏è –∑–µ—Ä–æ–∫–æ–∏–Ω!")

import random

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_attempts = {}

@bot.message_handler(commands=["–ª—É–Ω–∞"])
def moon_prize(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–Ω–∞ "üåï" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, "üåï"))
    result = cursor.fetchone()
    if not result or result[0] <= 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∏–Ω–∞ 'üåï'. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–õ—É–Ω" –Ω–∞ 1
    cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (user_id, "üåï"))
    conn.commit()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_attempts[user_id] = 0

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    prizes = [1000, 1500, 10, 100, 500, 140, 100, 150]
    random.shuffle(prizes)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É –ø–æ 3
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for i, prize in enumerate(prizes):
        button = types.InlineKeyboardButton("üéÅ", callback_data=f"moon_prize_{user_id}_{prize}_{i}")
        buttons.append(button)

    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ –ø–æ–¥–∞—Ä–∫–∞! üéÅ", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("moon_prize_"))
def handle_moon_prize(call):
    user_id = int(call.data.split("_")[2])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∏–º–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.")
        return

    prize = int(call.data.split("_")[3])  # –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏–∑
    index = int(call.data.split("_")[4])  # –ò–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_attempts.get(user_id, 0) >= 2:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏!")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    user_attempts[user_id] = user_attempts.get(user_id, 0) + 1
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (prize, user_id))
    conn.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–æ–Ω–∞ —Ç–µ–ø–µ—Ä—å "–æ—Ç–∫—Ä—ã—Ç–∞")
    keyboard = call.message.reply_markup.to_dict()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    new_keyboard = types.InlineKeyboardMarkup(row_width=3)

    for button_row in keyboard['inline_keyboard']:
        new_row = []
        for button in button_row:
            if button['callback_data'] == call.data:
                new_button = types.InlineKeyboardButton(f"‚úÖ {prize} GRAM", callback_data="used")
            else:
                new_button = types.InlineKeyboardButton(button['text'], callback_data=button['callback_data'])
            new_row.append(new_button)
        new_keyboard.add(*new_row)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_keyboard)

    bot.answer_callback_query(call.id, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize} GRAM!")

    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    if user_attempts[user_id] == 2:
        bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–∞ –ø–æ–¥–∞—Ä–∫–∞. –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!")
        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏
        for button_row in new_keyboard.to_dict()['inline_keyboard']:
            for button in button_row:
                if button['callback_data'] != "used":
                    button['text'] = "üîí"
                    button['callback_data'] = "locked"
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∞—Ä–µ–Ω–∞
@bot.message_handler(commands=['–∞—Ä–µ–Ω–∞'])
def eagle_arena(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–∏–Ω ü¶Ö
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, "ü¶Ö"))
    result = cursor.fetchone()

    if not result or result[0] < 1:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ä–ª–∞ ü¶Ö, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—Ä–µ–Ω–µ. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –±–æ–π
    keyboard = types.InlineKeyboardMarkup()
    button_invite = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_arena_{user_id}")
    keyboard.add(button_invite)

    bot.send_message(message.chat.id, f"@{message.from_user.username} –≤—ã–∑–≤–∞–ª –Ω–∞ –±–æ–π –≤ –∞—Ä–µ–Ω–µ –æ—Ä–ª–æ–≤! –ö—Ç–æ –æ—Å–º–µ–ª–∏—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_arena_"))
def accept_arena(call):
    challenger_id = int(call.data.split("_")[-1])  # ID –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –Ω–∞ –±–æ–π
    opponent_id = call.from_user.id  # ID –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ –≤—ã–∑–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–∫–∏–Ω ü¶Ö
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (challenger_id, "ü¶Ö"))
    challenger_skin = cursor.fetchone()
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (opponent_id, "ü¶Ö"))
    opponent_skin = cursor.fetchone()

    if not challenger_skin or challenger_skin[0] < 1:
        bot.answer_callback_query(call.id, "–£ –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –Ω–∞ –±–æ–π –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ä–ª–∞ ü¶Ö.")
        return
    if not opponent_skin or opponent_skin[0] < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ä–ª–∞ ü¶Ö –¥–ª—è –±–æ—è.")
        return

    # –ë–æ–π –º–µ–∂–¥—É –æ—Ä–ª–∞–º–∏ (50/50)
    winner_id = random.choice([challenger_id, opponent_id])
    loser_id = challenger_id if winner_id == opponent_id else opponent_id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 7500 GRAM, —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ —É–º–∏—Ä–∞–µ—Ç –æ—Ä–µ–ª
    cursor.execute("UPDATE users SET gram = gram + 7500 WHERE user_id = ?", (winner_id,))
    cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (loser_id, "ü¶Ö"))
    conn.commit()

    # –°–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    bot.send_message(call.message.chat.id, f"–ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{bot.get_chat_member(winner_id, winner_id).user.username}. –û–Ω –ø–æ–ª—É—á–∞–µ—Ç 7500 GRAM!\n"
                                           f"–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @{bot.get_chat_member(loser_id, loser_id).user.username}. –ï–≥–æ –æ—Ä–µ–ª ü¶Ö –ø–æ–≥–∏–±.")

import random

# Username –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CHANNEL_USERNAME = "@lb_valyta"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ª–±" –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∞—Ä–∫–∞
@bot.message_handler(func=lambda message: message.text.lower() == "–ª–±")
def open_gift(message):
    user_id = message.from_user.id
    username = message.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üéÅ
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = 'üéÅ'", (user_id,))
    result = cursor.fetchone()

    if result and result[0] > 0:
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üéÅ
        cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = 'üéÅ'", (user_id,))
        conn.commit()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ GRAM
        gram_rewards = {15: 6, 50: 7, 80: 7 }  # –®–∞–Ω—Å—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        gram_chances = {50: 7, 169: 7, 53: 7, 84: 7, 94: 6}  # –ù–æ–≤—ã–µ —à–∞–Ω—Å—ã –¥–ª—è –≥—Ä–∞–º–º
        total_gram_chance = 20 + sum(gram_rewards.values()) + sum(gram_chances.values())  # 20% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö + –Ω–æ–≤—ã–µ

        if random.randint(1, 100) <= total_gram_chance:
            possible_grams = [19, 900, 5, 700, 130, 70, 250, 500, 67, 196, 430, 128] + list(gram_rewards.keys()) + list(gram_chances.keys())
            gift_amount = random.choice(possible_grams)

            cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (gift_amount, user_id))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            bot.send_message(CHANNEL_USERNAME, f"#lb üéÅ {username} –ø–æ–ª—É—á–∏–ª {gift_amount} GRAM!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(message.chat.id, f"{username},\n\n–≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ üéÅ–õ—É—Ç–±–æ–∫—Å –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ:\n\n+{gift_amount} üíµ GRAM")

            return

        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–Ω—Å–æ–≤ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤
        skin_chances = {
            "2Ô∏è‚É£": 1, "5Ô∏è‚É£": 1.5, "1Ô∏è‚É£": 2, "4Ô∏è‚É£": 2, "7Ô∏è‚É£": 1.5, "6Ô∏è‚É£": 1, "8Ô∏è‚É£": 1.5, "9Ô∏è‚É£": 3, "3Ô∏è‚É£": 2,
            "‚ñ∂Ô∏è": 2, "‚è©": 0.5, "‚è≠Ô∏è": 0.5, "‚èØÔ∏è": 0.05, "üîü": 0.05, "üîº": 1, "‚è´": 0.5, "üîΩ": 1, "‚è∏Ô∏è": 0.5,
            "‚èπÔ∏è": 5, "‚è∫Ô∏è": 4, "‚èèÔ∏è": 3, "üü†": 1, "‚ö™": 0.3, "‚ö´": 0.03, "üü°": 4, "üü¢": 1, "üü£": 1, "üü§": 1,"‚¨õ":1,"‚¨ú":1.5,
            "üî¥": 0.3, "üîµ": 0.5, "üü´": 15, "üü™": 8, "üü©": 8, "üü®": 2, "üüß": 1.6, "üü¶": 0.05, "üü•": 0.3,"üíß":22,
            "üíú": 0.5, "üíõ": 0.05, "üíô": 0.8, "ü©∑": 2, "ü§ç": 0.05, "ü§é": 0.08, "üíö": 0.8, "‚ô•Ô∏è": 1.03, "‚ù§Ô∏è": 0.06,
            "‚óºÔ∏è": 0.03, "‚óªÔ∏è": 0.10, "üî≤": 1, "‚ñ´Ô∏è": 1, "üî≥": 0.2, "‚ñ™Ô∏è": 1, "üí£": 2, "ü¶Ö": 1, "üåü": 1,
            "üê±": 0.5, "üåö": 0.6, "ü™µ": 7, "ü™®": 4, "‚è≥": 3, "üí¶": 30,"üâê": 0.04, "„äôÔ∏è": 0.04, "„äóÔ∏è": 0.04, "üà¥": 0.03, "üàµ": 0.03, "üàπ": 0.03, "üà≤": 0.03,"üà∂": 0.02, "üàö": 0.02, "üà∏": 0.02, "üà∫": 0.02, "üà∑Ô∏è": 0.02, "üâë": 0.02,"üõü": 25, "‚ò¢Ô∏è": 0.01, "‚ò£Ô∏è": 0.01
        }

        # –í—ã–±–æ—Ä —Å–∫–∏–Ω–∞ –ø–æ —à–∞–Ω—Å–∞–º
        random_value = random.uniform(0, 100)
        cumulative_chance = 0
        selected_skin = None

        for skin, chance in skin_chances.items():
            cumulative_chance += chance
            if random_value <= cumulative_chance:
                selected_skin = skin
                break

        if selected_skin:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT INTO user_skins (user_id, skin, quantity)
                VALUES (?, ?, 1)
                ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
            ''', (user_id, selected_skin))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            bot.send_message(CHANNEL_USERNAME, f"#skin {selected_skin} {username}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(message.chat.id, f"{username},\n\n–≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ üéÅ–õ—É—Ç–±–æ–∫—Å –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ:\n\n+1 {selected_skin} \n–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∏–Ω–æ–º")

    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–∞. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

import random

# Username –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CHANNEL_USERNAME = "@lb_valyta"  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/zerobox" –¥–ª—è Zerobox
@bot.message_handler(commands=["zerobox"])
def open_zerobox(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Zerobox
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = 'üß∞'", (user_id,))
    result = cursor.fetchone()

    if result and result[0] > 0:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω Zerobox
        cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = 'üß∞'", (user_id,))
        conn.commit()

        # –°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤-—ç–º–æ–¥–∑–∏ (–¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏)
        skins = [
            "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üò≠", "üòâ", "üòó", "üòô", "üòö", "üòò", "ü•∞", "üòç", "ü§©", "ü•≥", "üôÉ", "üôÇ", "ü•≤", "üòä", "‚ò∫Ô∏è", "üòå", "üòè", "ü§§", "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü•¥", "üòî", "ü•∫", "üò¨", "üòë", "üòê", "üò∂", "ü§ê", "ü§î", "ü§´", "ü§≠", "ü•±", "ü§ó", "üò±", "ü§®", "üòì", "üßê", "üòü", "üòí", "üò•", "üôÑ", "üò¢", "üò§", "‚òπÔ∏è", "üò†", "üôÅ", "üò°", "üòï", "ü§¨", 
            "üò∞", "üòû", "üò®", "üòß", "üò¶", "üòÆ", "üòØ", "üò≤", "üò≥", "üòñ", "üò£", "ü§Ø", "üò©", "üò´", "üòµ", "ü•∂", "ü§¢", "ü•µ", "ü§Æ", "üò¥", "üò™", "ü§ß", "ü§í", "ü§ï", "üò∑", "ü§•", "üòá", "ü§†", "ü§ì", "ü§ë", "üòé", "ü•∏",
            "üá∏üáΩ", "üá∏üáª", "üá∏üáπ", "üá∏üá∏", "üá∏üá∑", "üá∏üá¥", "üá∏üá≥", "üá∏üá≤", "üá∏üá±", "üá∏üá∞", "üá∏üáØ", "üá∏üáÆ", "üá∏üá≠", "üá∏üá¨", "üá∏üá™", "üá∏üá©", "üá∏üá®", "üá∏üáß", "üá∏üá¶", "üá∑üáº", "üá∑üá∫", "üá∑üá∏", "üá∑üá¥", "üá∑üá™", "üá∂üá¶", "üáµüáæ", "üáµüáº", "üáµüáπ", "üáµüá∏", "üáµüá∑", "üáµüá≥", "üáµüá≤", "üáµüá±", "üáµüá∞", "üáµüá≠", "üáµüá¨", "üáµüá´", "üáµüá™", "üáµüá¶"
        ]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∫–∏–Ω
        selected_skin = random.choice(skins)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute('''
            INSERT INTO user_skins (user_id, skin, quantity)
            VALUES (?, ?, 1)
            ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 1
        ''', (user_id, selected_skin))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ üß∞ Zerobox –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–Ω {selected_skin}!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        bot.send_message(CHANNEL_USERNAME, f"#zerobox {user_id} üéä –ø–æ–ª—É—á–∏–ª {selected_skin}!")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç üß∞ Zerobox. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å–∫–∏–Ω–æ–≤.")

# ID –∞–¥–º–∏–Ω–∞
ADMIN_ID = 6392028972  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–±–∞—Å–∏—Ä
@bot.message_handler(commands=['–±–∞—Å–∏–∏—Ä'])
def give_gifts(message):
    if message.from_user.id == ADMIN_ID:
        user_id = message.from_user.id

        # –ù–∞—á–∏—Å–ª—è–µ–º 50 –ø–æ–¥–∞—Ä–∫–æ–≤ (üéÅ) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cursor.execute('''
            INSERT INTO user_skins (user_id, skin, quantity)
            VALUES (?, 'üéÅ', 50)
            ON CONFLICT(user_id, skin) DO UPDATE SET quantity = quantity + 50
        ''', (user_id,))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, "üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 –ø–æ–¥–∞—Ä–∫–æ–≤ '–õ–ë' –æ—Ç –ö—Ä–∏—Ç!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        bot.send_message(CHANNEL_USERNAME, f"üéÅ {user_id} –ø–æ–ª—É—á–∏–ª 50 –ø–æ–¥–∞—Ä–∫–æ–≤ '–õ–ë' –æ—Ç –ö—Ä–∏—Ç!")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Ä–µ–¥–∫–æ—Å—Ç—å
@bot.message_handler(commands=["—Ä–µ–¥–∫"])
def check_rarity(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∏–Ω
        args = message.text.split(" ", maxsplit=1)
        if len(args) < 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∫–∏–Ω. –ü—Ä–∏–º–µ—Ä: /—Ä–µ–¥–∫–æ—Å—Ç—å ü•ä")
            return

        skin = args[1]  # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–∏–Ω–∞ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT SUM(quantity) FROM user_skins WHERE skin = ?", (skin,))
        result = cursor.fetchone()

        if result and result[0]:
            total = result[0]
            bot.send_message(message.chat.id, f"{skin} ‚Äî {total} ")
        else:
            bot.send_message(message.chat.id, f" {skin} ‚Äî 0")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['–æ—Ç–≤–µ—Ç–∏—Ç—å'])
def admin_reply(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç–∏—Ç—å <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        user_id = int(parts[1])
        response_message = parts[2]
        bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\#n{response_message}")
        bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

import random
from telebot import TeleBot, types

@bot.message_handler(commands=['gram'])
def transfer_gram(message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /gram <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/gram 10")
            return

        amount = float(parts[1].replace(",", "."))
        if amount <= 0:
            bot.reply_to(message, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü—Ä–∏–º–µ—Ä:\n/gram 10")
            return

        if not message.reply_to_message:
            bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å GRAM.")
            return

        recipient_id = message.reply_to_message.from_user.id
        recipient_username = message.reply_to_message.from_user.username or "–ë–µ–∑_–∏–º–µ–Ω–∏"
        sender_id = message.from_user.id
        bot_id = bot.get_me().id  

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute("SELECT gram FROM users WHERE user_id = ?", (sender_id,))
        sender_balance = cursor.fetchone()
        if not sender_balance or sender_balance[0] < amount:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
            return

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –±–æ—Ç—É
        if recipient_id == bot_id:
            response = "–°–ø–∞—Å–∏–±–æ!"
            if 1 <= amount < 250:
                response = "—Ö–º–º... –ú–∞–ª–æ"
            elif 250 <= amount < 700:
                response = "—Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ"
            elif 700 <= amount < 1200:
                response = "—É—Ö —Ç—ã —Å–ø–∞—Å–∏–±–æ ‚ù§Ô∏è"
            elif 1200 <= amount < 2000:
                response = "–æ–≥–æ–æ —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –ê–ê–ê–ê–ê"

            # **–ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç GRAM**
            cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (bot_id, "–ë–æ—Ç"))
            cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (amount, bot_id))
            cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (amount, sender_id))
            conn.commit()

            bot.reply_to(message, response)
            return

        # –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–±–µ
        if recipient_id == sender_id:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–≤–∞—Å—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ–º {amount:.2f} GRAM!")
            return

        # **–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (recipient_id, recipient_username))
        cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (amount, sender_id))
        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (amount, recipient_id))
        conn.commit()

        bot.reply_to(message, f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount:.2f} GRAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}.")

        # **–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –±–æ—Ç–∞**
        if random.randint(1, 100) == 1:  # –®–∞–Ω—Å 1%
            cursor.execute("SELECT user_id, username FROM users ORDER BY RANDOM() LIMIT 1")
            random_user = cursor.fetchone()
            if random_user:
                bot.send_message(random_user[0], f"/gram 200")
        
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GRAM. –ü—Ä–∏–º–µ—Ä:\n/gram 10")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ /add_gram
@bot.message_handler(commands=['bgram'])
def admin_add_gram(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    parts = message.text.split()
    if len(parts) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_gram <@username> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    username = parts[1].lstrip("@")
    try:
        amount = int(parts[2])
        cursor.execute("SELECT user_id FROM users WHERE username = ?", (username,))
        user_id = cursor.fetchone()
        if not user_id:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute("UPDATE users SET gram = gram + ? WHERE username = ?", (amount, username))
        conn.commit()
        bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount} GRAM.")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    
@bot.message_handler(commands=['–±–∞—Å–∏—Ä—Ä7'])
def basir_command(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –±–∞–ª–∞–Ω—Å –Ω–∞ 10000 –≥—Ä–∞–º–º
        cursor.execute("UPDATE users SET gram = gram + 10000 WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.reply_to(message, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10,000 –≥—Ä–∞–º–º!")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO users (user_id, gram) VALUES (?, ?)", (user_id, 10000))
        conn.commit()
        bot.reply_to(message, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–ª—É—á–∏–ª–∏ 10,000 –≥—Ä–∞–º–º!")

@bot.message_handler(commands=['stars'])
def transfer(message):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ —Å—É–º–º–∞
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /stars <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/stars 1")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã
        amount = float(parts[1].replace(",", "."))
        if amount <= 0:
            bot.reply_to(message, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü—Ä–∏–º–µ—Ä:\n/stars 1")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if not message.reply_to_message:
            bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å Stars.")
            return

        recipient_id = message.reply_to_message.from_user.id
        recipient_username = message.reply_to_message.from_user.username or "–ë–µ–∑_–∏–º–µ–Ω–∏"
        sender_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute("SELECT stars FROM users WHERE user_id = ?", (sender_id,))
        sender_balance = cursor.fetchone()
        if not sender_balance or sender_balance[0] < amount:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
        cursor.execute("UPDATE users SET stars = stars - ? WHERE user_id = ?", (amount, sender_id))
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (recipient_id, recipient_username))
        cursor.execute("UPDATE users SET stars = stars + ? WHERE user_id = ?", (amount, recipient_id))
        conn.commit()

        bot.reply_to(message, f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ {amount:.2f} Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}.")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars. –ü—Ä–∏–º–µ—Ä:\n/–ø–µ—Ä–µ–¥–∞—Ç—å 1")

# –ö–æ–º–∞–Ω–¥–∞ /–º–∏–Ω–∏ –¥–ª—è –º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['–º–∏–Ω–∏'])
def mine(message):
    user_id = message.from_user.id  # ID —Ç–æ–≥–æ, –∫—Ç–æ –º–∏–Ω–∏—Ä—É–µ—Ç
    reply_to_message = message.reply_to_message  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –æ—Ç–≤–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ —Å—É–º–º–∞
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /–º–∏–Ω–∏ <—Å—É–º–º–∞>. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500.")
        return

    amount = int(args[1])
    if amount < 10 or amount > 500:
        bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500 GRAM.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not reply_to_message:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥—É /–º–∏–Ω–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
        return

    victim_id = reply_to_message.from_user.id  # ID –∂–µ—Ä—Ç–≤—ã
    victim_username = reply_to_message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–∏–Ω üí£
    cursor.execute("SELECT quantity FROM user_skins WHERE user_id = ? AND skin = ?", (user_id, "üí£"))
    bomb = cursor.fetchone()

    if not bomb or bomb[0] < 1:
        bot.send_message(message.chat.id, "–î–ª—è –º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω —Å–∫–∏–Ω üí£. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∂–µ—Ä—Ç–≤—ã
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (victim_id,))
    victim_data = cursor.fetchone()

    if not victim_data or victim_data[0] < amount:
        bot.send_message(message.chat.id, f"{victim_username} –Ω–µ –∏–º–µ–µ—Ç {amount} GRAM –¥–ª—è –º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω—É (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    cursor.execute('''
        INSERT INTO user_traps (miner_id, victim_id, amount)
        VALUES (?, ?, ?)
        ON CONFLICT(victim_id) DO UPDATE SET miner_id = ?, amount = ?
    ''', (user_id, victim_id, amount, user_id, amount))

    # –û—Ç–Ω–∏–º–∞–µ–º –æ–¥–Ω—É –±–æ–º–±—É
    cursor.execute("UPDATE user_skins SET quantity = quantity - 1 WHERE user_id = ? AND skin = ?", (user_id, "üí£"))
    conn.commit()

    bot.send_message(
        message.chat.id,
        f"üí£ {message.from_user.username} –∑–∞–º–∏–Ω–∏—Ä–æ–≤–∞–ª {victim_username} –Ω–∞ —Å—É–º–º—É {amount} GRAM! "
        f"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {victim_username} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–∏–Ω—É."
    )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω
cursor.execute('''
CREATE TABLE IF NOT EXISTS user_traps (
    victim_id INTEGER PRIMARY KEY,
    miner_id INTEGER,
    amount INTEGER
)
''')
conn.commit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∏–Ω—ã
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    victim_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–∏–Ω–∞ –Ω–∞ –∂–µ—Ä—Ç–≤—É
    cursor.execute("SELECT miner_id, amount FROM user_traps WHERE victim_id = ?", (victim_id,))
    trap = cursor.fetchone()

    if trap:
        miner_id, amount = trap

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∂–µ—Ä—Ç–≤—ã
        cursor.execute("SELECT gram FROM users WHERE user_id = ?", (victim_id,))
        victim_data = cursor.fetchone()

        if not victim_data or victim_data[0] < amount:
            bot.send_message(
                message.chat.id,
                f"{message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω—É, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GRAM!"
            )
        else:
            # –°–Ω–∏–º–∞–µ–º —Å—É–º–º—É —É –∂–µ—Ä—Ç–≤—ã
            cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (amount, victim_id))
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É —Ç–æ–º—É, –∫—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–∏–Ω—É
            cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (amount, miner_id))
            # –£–¥–∞–ª—è–µ–º –º–∏–Ω—É
            cursor.execute("DELETE FROM user_traps WHERE victim_id = ?", (victim_id,))
            conn.commit()

            bot.send_message(
                message.chat.id,
                f"üí• {message.from_user.username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –º–∏–Ω—É –Ω–∞ {amount} GRAM! "
                f"{amount} GRAM –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã {bot.get_chat(miner_id).username}."
            )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã GRAM –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['–∏–∑–º–µ–Ω–∏—Ç—å'])
def change_gram(message):
    if message.from_user.id != ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –∞–¥–º–∏–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.reply_to_message:
        bot.reply_to(message, "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ GRAM.")
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–∏–∑–º–µ–Ω–∏—Ç—å <+/-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>. –ü—Ä–∏–º–µ—Ä: /–∏–∑–º–µ–Ω–∏—Ç—å +100")
            return

        change = float(parts[1].replace(",", "."))
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.username or "–ë–µ–∑_–∏–º–µ–Ω–∏"

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (change, user_id))
        conn.commit()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        bot.reply_to(
            message,
            f"–ë–∞–ª–∞–Ω—Å GRAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'+' if change > 0 else ''}{change:.2f}.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {cursor.execute('SELECT gram FROM users WHERE user_id = ?', (user_id,)).fetchone()[0]:.2f} GRAM."
        )
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /–∏–∑–º–µ–Ω–∏—Ç—å +100")

from telebot import types

# InlineQueryHandler –¥–ª—è –≤—ã–∑–æ–≤–∞ –±–æ—è
@bot.inline_handler(lambda query: query.query.startswith("–±–æ–π "))
def inline_battle(query):
    try:
        # –ü–∞—Ä—Å–∏–º –Ω–∞–≥—Ä–∞–¥—É
        reward = int(query.query.split()[1])
        if reward <= 0:
            raise ValueError
    except (IndexError, ValueError):
        results = [
            types.InlineQueryResultArticle(
                id="1",
                title="–û—à–∏–±–∫–∞",
                description="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã (–ø—Ä–∏–º–µ—Ä: –±–æ–π 100)",
                input_message_content=types.InputTextMessageContent(
                    message_text="‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã! –ü—Ä–∏–º–µ—Ä: @Valyta_stars_bot –±–æ–π 100"
                ),
            )
        ]
        bot.answer_inline_query(query.id, results, cache_time=1)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º Inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –±–æ—è
    battle_text = f"‚öîÔ∏è {query.from_user.first_name} —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–∞ –±–æ–π —Å –Ω–∞–≥—Ä–∞–¥–æ–π {reward} GRAM!"
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"battle_{query.from_user.id}_{reward}"
    )
    markup.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ inline
    result = types.InlineQueryResultArticle(
        id="2",
        title=f"–ë–æ–π –Ω–∞ {reward} GRAM",
        description=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –≤ —á–∞—Ç.",
        input_message_content=types.InputTextMessageContent(message_text=battle_text),
        reply_markup=markup,
    )
    bot.answer_inline_query(query.id, [result], cache_time=1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –±–æ—è —á–µ—Ä–µ–∑ inline
@bot.callback_query_handler(func=lambda call: call.data.startswith("battle_"))
def accept_inline_battle(call):
    data = call.data.split("_")
    try:
        attacker_id = int(data[1])
        reward = int(data[2])
    except ValueError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—è!")
        return

    defender_id = call.from_user.id

    if attacker_id == defender_id:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ —Å–∞–º–∏ —É —Å–µ–±—è!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (attacker_id,))
    attacker_balance = cursor.fetchone()
    cursor.execute("SELECT gram FROM users WHERE user_id = ?", (defender_id,))
    defender_balance = cursor.fetchone()

    if not attacker_balance or attacker_balance[0] < reward:
        bot.answer_callback_query(call.id, "–£ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –±–æ—è!")
        return
    if not defender_balance or defender_balance[0] < reward:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –±–æ—è!")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è
    attacker_chance = random.randint(1, 100)
    defender_chance = random.randint(1, 100)

    if attacker_chance > defender_chance:
        winner_id, loser_id = attacker_id, defender_id
    else:
        winner_id, loser_id = defender_id, attacker_id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
    cursor.execute("UPDATE users SET gram = gram + ? WHERE user_id = ?", (reward, winner_id))
    cursor.execute("UPDATE users SET gram = gram - ? WHERE user_id = ?", (reward, loser_id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    winner_chat = bot.get_chat(winner_id)
    loser_chat = bot.get_chat(loser_id)
    
    winner_name = f"@{winner_chat.username}" if winner_chat.username else winner_chat.first_name
    loser_name = f"@{loser_chat.username}" if loser_chat.username else loser_chat.first_name

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è
    battle_result = (
        f"‚öîÔ∏è –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} GRAM\n"
        f"üòî –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser_name}"
    )

    bot.send_message(defender_id, battle_result)
    bot.send_message(attacker_id, battle_result)

    bot.edit_message_text(
        f"‚öîÔ∏è –ë–æ–π –º–µ–∂–¥—É {winner_name} –∏ {loser_name} –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} GRAM",
        call.message.chat.id,
        call.message.message_id,
    )

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultArticle, InputTextMessageContent

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.inline_handler(func=lambda query: True)
def handle_inline_query(inline_query):
    try:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ò–º—è–ö–Ω–æ–ø–∫–∏ –°—Å—ã–ª–∫–∞ –û–ø–∏—Å–∞–Ω–∏–µ"
        query_text = inline_query.query.strip()
        if not query_text:
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = query_text.split(" ", 2)
        if len(parts) < 3:
            return  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        button_name, link, description = parts

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å –ª—é–±–æ–π —Å—Å—ã–ª–∫–æ–π
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text=button_name, url=link))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ
        result = InlineQueryResultArticle(
            id="1",
            title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É",
            description=description,
            input_message_content=InputTextMessageContent(description),
            reply_markup=markup
        )

        bot.answer_inline_query(inline_query.id, [result], cache_time=1)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(content_types=['new_chat_members'])
def greet_new_member(message):
    inviter_id = message.from_user.id  # ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_member_id = message.new_chat_members[0].id  # ID –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    inviter_username = message.from_user.username or "–ë–µ–∑_–∏–º–µ–Ω–∏"

    print(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {new_member_id}, –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π: {inviter_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤ –∫–∞–∫–æ–º —á–∞—Ç–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ—Å–ø—É–±–ª–∏–∫–∞
    chat_id_for_message = None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É
    cursor.execute("SELECT chat_id FROM republics WHERE creator_id = ?", (inviter_id,))
    result = cursor.fetchone()

    if result:
        chat_id_for_message = result[0]  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ —á–∞—Ç—ã –±—É–¥—É—Ç —Å–≤—è–∑–∞–Ω—ã —Å —Ä–µ—Å–ø—É–±–ª–∏–∫–æ–π

    print(f"–ß–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {chat_id_for_message}")

    # –ï—Å–ª–∏ —á–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID
    if message.chat.id == CHAT_ID_1 or message.chat.id == CHAT_ID_2:
        if inviter_id != new_member_id:
            # –î–æ–±–∞–≤–ª—è–µ–º 350 GRAM –≤—Å–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–º
            cursor.execute("UPDATE users SET gram = gram + 350 WHERE user_id = ?", (inviter_id,))
            conn.commit()

            print(f"–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {inviter_username} –¥–æ–±–∞–≤–ª–µ–Ω–æ 350 GRAM")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            bot.send_message(
                message.chat.id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{inviter_username} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞! üéâ –û–Ω –ø–æ–ª—É—á–∞–µ—Ç 350 GRAM."
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è
            bot.send_message(
                message.chat.id,
                ""
            )

import time

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω_–±–∞—Å–∏—Ä_—Å–µ—Ä")

while True:
    try:
        bot.polling(non_stop=True, interval=0, timeout=40, long_polling_timeout=50)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(5)  
        
        
import os

def clear_console():
    os.system('clear')

clear_console()
